{"cells":[{"cell_type":"markdown","metadata":{"id":"WP7Rh4h5ufde"},"source":["Q1.What is the difference between interpreted and compiled languages?\n","\n","\n","\n","ans-\n","\n"," 1.**Compiled Languages:**\n","\n","\n","\n","    definition: Source code is translated into machine code (binary instructions) by a compiler before execution.\n","\n","    Execution: The computer runs the compiled binary directly.\n","\n","    EXAMPLES: C, C++, Rust, Go.\n","\n","\n","\n","\n","**ADVANTAGES:**\n","\n","    Faster execution (since it’s already machine code).\n","\n","    Better optimization by the compiler\n","\n"," **DISADVANTAGE:**\n","\n","    Compilation step required before running.\n","\n","    Less flexible for quick testing or scripting.\n","\n","**2.Interpreted Languages:**\n","\n","\n","\n","\n","    Definition: Source code is executed line by line by an interpreter at runtime.\n","\n","    Execution: No separate compilation step; interpreter directly runs the code.\n","\n","    EXAMPLES: Python, JavaScript, Ruby, PHP.\n","\n","**ADVANTAGE:**\n","\n","    Easier to test and debug (run immediately without compiling).\n","\n","    More portable (interpreter handles machine differences).\n","\n","\n","**DISADVANTAGE:**\n","\n","    Slower execution (interpreter translates while running).\n","\n","    More memory usage"]},{"cell_type":"markdown","metadata":{"id":"2QG4Rw0zw7So"},"source":[".2 What is exception handling in Python?\n","ans-\n","\n","\n","    Exception handling in Python is a mechanism that allows programs to\n","\n","    gracefully manage and respond to runtime errors or unexpected events, known\n","\n","    as exceptions, without abruptly terminating. It ensures that the program\n","\n","    can recover from errors, provide informative messages to the user, or\n","\n","    perform necessary cleanup actions.\n","\n","\n","\n","**The core components of exception handling in Python are:**\n","\n","\n","**try block:**\n","\n","\n","    This block contains the code that might potentially raise an exception.\n","\n","\n","\n","**except block:**\n","\n","\n","    If an exception occurs within the try block, the program's control is\n","\n","    transferred to a corresponding except block. This block contains the code\n","\n","    to handle the specific exception (or types of exceptions) that occurred.\n","\n","**else block (optional):**\n","\n","\n","\n","    This block is executed only if the code inside the try block completes without raising any exceptions.\n","\n","\n","    finally block (optional):\n","    \n","    This block is always executed, regardless of whether an exception occurred or was handled. It is typically used for cleanup operations, such as closing files or releasing resources."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8588,"status":"ok","timestamp":1757426477454,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"2786CGqPx5VD","outputId":"1773e92f-149e-4b70-fa11-f36d330aa099"},"outputs":[{"name":"stdout","output_type":"stream","text":["Enter a number: 25\n","Enter another number: 38\n","The result is: 0.6578947368421053\n","Operation completed successfully.\n","Execution finished.\n"]}],"source":["#example\n","\n","try:\n","    # Code that might raise an exception\n","    num1 = int(input(\"Enter a number: \"))\n","    num2 = int(input(\"Enter another number: \"))\n","    result = num1 / num2\n","    print(f\"The result is: {result}\")\n","except ZeroDivisionError:\n","    # Handles specific exception: division by zero\n","    print(\"Error: Cannot divide by zero!\")\n","except ValueError:\n","    # Handles specific exception: invalid input for integer conversion\n","    print(\"Error: Invalid input. Please enter a valid number.\")\n","except Exception as e:\n","    # Catches any other unexpected exceptions\n","    print(f\"An unexpected error occurred: {e}\")\n","else:\n","    # Executed if no exception occurred in the try block\n","    print(\"Operation completed successfully.\")\n","finally:\n","    # Always executed, regardless of exceptions\n","    print(\"Execution finished.\")"]},{"cell_type":"markdown","metadata":{"id":"rPl0tzl90D2U"},"source":["3 What is the purpose of the finally block in exception handling?\n","\n","ans-\n","\n","    finally block in exception handling serves a very specific and important\n","    \n","    \n","    purpose: it guarantees that certain code will run no matter what happens in\n","\n","    the try or catch blocks—whether an exception is thrown, caught, or not thrown at all.\n","\n","**why use finally?**\n","\n","**Resource cleanup:**\n","\n","    Perfect for closing files, releasing database connections, or freeing up memory.\n","\n","\n","**Consistency:**\n","\n","\n","    Ensures that critical code runs even if an error occurs.\n","\n","\n","\n","**Reliability:**\n","\n","    Helps avoid resource leaks and unpredictable behavior.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":49,"status":"ok","timestamp":1757427448377,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"rwLLvBYm1jdQ","outputId":"c61b30fc-8f3e-4463-a0dc-8fb1fd794f78"},"outputs":[{"name":"stdout","output_type":"stream","text":["Error reading file.\n"]}],"source":["#example\n","file = None  # Initialize file to None\n","try:\n","    # Code that might throw an exception\n","    file = open(\"data.txt\", \"r\")\n","    data = file.read()\n","except IOError:\n","    print(\"Error reading file.\")\n","finally:\n","    if file is not None: # Check if file is defined before closing\n","        file.close()  # This runs no matter what"]},{"cell_type":"markdown","metadata":{"id":"e1FmZE2j17lW"},"source":["4 What is logging in Python?\n","\n","ans-\n","\n","    Logging in Python is a powerful way to track events\n","\n","    and monitor the behavior of your code during\n","\n","    execution. It’s like leaving breadcrumbs so you can\n","\n","    understand what happened, when, and why—especially\n","\n","    useful when debugging or running large applications\n","\n","\n","What is it used for :\n","\n","-Debugging:  \n","\n","  \n","    See what your code was doing before it crashed.\n","\n","\n","-Monitoring:\n","\n","    Track usage patterns or performance issues.\n","\n","\n","-Auditing:\n","\n","    Record actions for security or compliance.\n","\n","\n","-Replacing print():\n","\n","\n","    More flexible and professional than using print() statements.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":53,"status":"ok","timestamp":1757427748438,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"aqiihEoK2zpW","outputId":"5727372c-4fda-4e8b-8c97-6a1e1ca2e850"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:root:This is a warning\n","ERROR:root:An error occurred\n"]}],"source":["import logging\n","\n","logging.basicConfig(level=logging.INFO)\n","logging.info(\"Program started\")\n","logging.warning(\"This is a warning\")\n","logging.error(\"An error occurred\")"]},{"cell_type":"markdown","metadata":{"id":"qNAaG-_AzT79"},"source":["Q5 What is the significance of the __ del__ method in Python?\n","\n","ans-\n","\n","\n","    In Python, the__del__method is a destructor method. It is automatically called when an object is about to be destroyed (i.e., when it is no longer in use and is being garbage collected).\n","\n","Significance of del\n","\n","   1.CLEANUP TASK:\n","\n","    Used to release resources before an object is deleted.\n","\n","    Example: closing files, releasing network connections, freeing memory.\n","\n","2.FINAL STEP BEFORE DELETION\n","\n","    Acts like a “goodbye” function for the object.\n","\n","3.GARBAGE COLLECTION:\n","\n","    Python automatically destroys objects when they are no longer referenced.\n","\n","    _del__runs just before the object is removed from memory."]},{"cell_type":"markdown","metadata":{"id":"sqwzFXbf1gW5"},"source":["Q6.What is the difference between import and from ... import in Python?\n","\n","\n","ans-\n","\n","\n","1.**IMPORT**\n","\n","    SYNTAX:-\n","\n","    import module_name\n","\n","    This imports the whole module.\n","\n","    To use something from that module, you must reference it with the module name (dot notation\n","\n","\n","    example"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":53,"status":"ok","timestamp":1757511540179,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"CaOKxMvL1-s7","outputId":"2e422b54-0112-4aa8-f15d-8e790702502b"},"outputs":[{"name":"stdout","output_type":"stream","text":["5.385164807134504\n","3.141592653589793\n"]}],"source":["import math\n","\n","print(math.sqrt(29))\n","print(math.pi)"]},{"cell_type":"markdown","metadata":{"id":"FC1T5m9m2lfJ"},"source":["**FROM ...IMPORT-**\n","\n","\n","\n","    from module_name import specific_name\n","\n","\n","\n","    This imports only specific functions, classes, or variables from a module.\n","\n","\n","\n","    You can use them directly without the module prefix.\n","\n","    example :>"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1757511756103,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"yErFcdEk25aV","outputId":"6de66cdc-350a-4110-eec9-a33d42ebe0a8"},"outputs":[{"name":"stdout","output_type":"stream","text":["5.385164807134504\n","3.141592653589793\n"]}],"source":["from math import sqrt, pi\n","print(sqrt(29))\n","print(pi)"]},{"cell_type":"markdown","metadata":{"id":"UrFqu7d_3WVG"},"source":["**KEY DIFFRENCES:**\n","\n","\n","\n","\n","---\n","\n","\n","    Feature                    \timport\t                     from ... import\n","\n","\n","\n","\n","---\n","\n","\n","    Imports\t  ----->            Whole module\t              Specific functions, classes, or variables\n","\n","\n","\n","    Access  ----->        \tMust use module_name.item      Use directly without prefix\n","\n","\n","\n","    Memory  ----->          \tMay load more than needed\t     Loads only requested names\n","\n","\n","\n","    Readability\t ----->     Clearer where things come from\t    Shorter, but can be confusing if many imports\n"]},{"cell_type":"markdown","metadata":{"id":"-Ya_WA6p4imW"},"source":["Q7.How can you handle multiple exceptions in Python?\n","\n","ans-\n","\n","In Python, you can handle multiple exceptions in a few different ways depending on your use case.\n","\n","\n","\n","✅ **1. Multiple except blocks**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1757512149722,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"BWh8OYgK4phj","outputId":"919d8214-f2e2-427b-839f-6ababc5584f2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Invalid conversion to integer\n"]}],"source":["try:\n","    x = int(\"abc\")   # ValueError\n","    y = 10 / 0       # ZeroDivisionError\n","except ValueError:\n","    print(\"Invalid conversion to integer\")\n","except ZeroDivisionError:\n","    print(\"Division by zero not allowed\")"]},{"cell_type":"markdown","metadata":{"id":"IEltTVrh48Jy"},"source":["✅**2. Catch multiple exceptions in one block (tuple)**\n","\n","If multiple exceptions should be handled the same way, you can group them in a tuple:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1757513080087,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"90oDBPXf5Aey","outputId":"0d26fe8e-796b-494a-b4af-25a4ea5764da"},"outputs":[{"name":"stdout","output_type":"stream","text":["An error occurred: invalid literal for int() with base 10: 'abc'\n"]}],"source":["try:\n","    x = int(\"abc\")\n","    y = 10 / 0\n","except (ValueError, ZeroDivisionError) as e:\n","    print(f\"An error occurred: {e}\")"]},{"cell_type":"markdown","metadata":{"id":"ayBev_sx8aqk"},"source":["✅ 3. **Generic except for all exceptions**\n","\n","Catch any exception (not recommended unless you really need it):"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1757513135958,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"mLoakAxi8hT5","outputId":"f86e21dc-286a-46ca-f8fb-218332dd81e2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Unexpected error: invalid literal for int() with base 10: 'abc'\n"]}],"source":["try:\n","    x = int(\"abc\")\n","    y = 10 / 0\n","except Exception as e:\n","    print(f\"Unexpected error: {e}\")\n"]},{"cell_type":"markdown","metadata":{"id":"BWuMxRzu8l_s"},"source":["✅ 4. **else and finally with multiple exceptions**\n","\n","You can also combine else (runs if no error occurs) and finally (always runs)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5494,"status":"ok","timestamp":1757513168810,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"ogB6WGhq8nwm","outputId":"89e6f4d6-3416-4045-eb1d-ccdb00c500c8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Enter a number: 334\n","Result: 0.029940119760479042\n","Execution finished.\n"]}],"source":["try:\n","    num = int(input(\"Enter a number: \"))\n","    result = 10 / num\n","except ValueError:\n","    print(\"Please enter a valid number.\")\n","except ZeroDivisionError:\n","    print(\"Cannot divide by zero.\")\n","else:\n","    print(f\"Result: {result}\")\n","finally:\n","    print(\"Execution finished.\")\n","\n"]},{"cell_type":"markdown","metadata":{"id":"SOEgvHKP8vFf"},"source":["Q8. What is the purpose of the with statement when handling files in Python?\n","\n","\n","ans-\n","\n","\n","\n","**Purpose of with in file handling**\n","\n","\n","\n","\n","    It ensures that the file is properly closed after its suite finishes, even if an exception occurs.\n","\n","\n","\n","\n","    You don’t need to explicitly call file.close().\n","\n","\n","\n","\n","    It makes the code cleaner, safer, and more readable.\n","\n","     EXAMPLE WITHOUT with"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1757513642098,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"pqjQIQgG9sPj","outputId":"7a2b70c9-f947-447e-ecf1-8d639bd1b2e9"},"outputs":[{"name":"stdout","output_type":"stream","text":["This is some example content.\n"]}],"source":["file = open(\"example.txt\", \"r\")\n","try:\n","  data = file.read()\n","  print(data)\n","finally:\n","  file.close()"]},{"cell_type":"markdown","metadata":{"id":"ZG453Bx6-rIT"},"source":["**EXAMPLE WITH** with\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1757513857490,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"K5d1cHtO-uww","outputId":"e91ccb86-776a-47e1-e854-2607999b21f9"},"outputs":[{"name":"stdout","output_type":"stream","text":["This is some example content.\n"]}],"source":["with open(\"example.txt\" , \"r\") as file:\n","  data = file.read()\n","  print(data)"]},{"cell_type":"markdown","metadata":{"id":"srFs5GIBRddK"},"source":["**KEY BENIFITS:**\n","\n","\n","    Automatic resource cleanup – file closes automatically.\n","\n","\n","    Less error-prone – no risk of forgetting file.close().\n","\n","  \n","\n","    Cleaner code – fewer lines and better readability.\n","    \n","\n","    Works with other resources too (like sockets, database connections, locks)."]},{"cell_type":"markdown","metadata":{"id":"M1_qZdWWRv7S"},"source":["Q9.What is the difference between multithreading and multiprocessing?\n","\n","ans-\n","\n","\n","**MULTITHREADING:**\n","\n","\n","**Definition:**\n","\n","\n","    Running multiple threads (lightweight processes) within the same process.\n","\n","**Memory:**\n","\n","\n","    All threads share the same memory space.\n","\n","\n","**Best for:**\n","\n","    I/O-bound tasks (like file I/O, network requests, waiting for user input).\n","\n","**In Python:**\n","\n","\n","    Limited by the Global Interpreter Lock (GIL), so only one thread executes Python bytecode at a time.\n","\n","**EXAMPLE USE CASES**:\n","\n","    Downloading multiple web pages at once.\n","\n","\n","    Handling multiple clients in a chat server.\n","\n","\n","    Reading/writing files concurrently.\n","\n","\n","\n","\n","**MULTIPROCESSING**:\n","\n","**Definition:**\n","\n","\n","    Running multiple independent processes, each with its own Python interpreter and memory space.\n","\n","**Memory**:\n","\n","\n","    Processes do not share memory (need inter-process communication to share data).\n","\n","**Best for**:\n","\n","\n","    CPU-bound tasks (like calculations, data processing, heavy computation).\n","\n","**In Python:**\n","\n","\n","    Bypasses the GIL since each process has its own interpreter.\n","\n","**EXAMPLE USES CASES:**\n","\n","    Image/video processing.\n","\n","    Machine learning model training.\n","\n","    Large mathematical computations."]},{"cell_type":"markdown","metadata":{"id":"M0U-JnsUU3av"},"source":["Q10.What are the advantages of using logging in a program?\n","\n","ans-\n","\n","\n"," **1.Better than print() for debugging**\n","\n","    Print() is simple, but not flexible.\n","\n","    Logging provides structured, configurable, and professional debugging information.\n","\n","2.**Different log levels (severity)**\n","\n","\n","    logging allows categorizing messages as:\n","\n","    DEBUG – detailed info (useful for developers)\n","\n","    INFO – confirmation that things work as expected\n","\n","    WARNING – something unexpected happened, but program still runs\n","\n","    ERROR – a serious issue, program might fail in part\n","\n","    CRITICAL – very severe error, program may crash\n","\n","\n","**3.Configurable output:**\n","  \n","    Logs can be written to:\n","\n","    Console\n","\n","    Files\n","\n","    Remote servers\n","\n","    Databases\n","\n","\n","**4.Persistent record of events**\n","\n","    Unlike print(), which disappears after execution, logs can be stored in files for future analysis.\n","    \n","\n","    Helps in debugging issues reported later.\n","\n","\n","\n","**5.Easy debugging in production:**\n","\n","    In production, you often can’t use print() freely.\n","\n","\n","\n","    Logging lets you capture what happened in real-time, without interrupting"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34,"status":"ok","timestamp":1757519725421,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"A9qSNSqoVnFo","outputId":"75fea2aa-6359-4d99-ffb6-a79b6dc54c03"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:root:Low disk space\n","ERROR:root:File not found\n","CRITICAL:root:System crash\n"]}],"source":["#example\n","import logging\n","\n","# Configure logging\n","logging.basicConfig(\n","    level=logging.DEBUG,\n","    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n","    filename=\"app.log\",  # logs to a file instead of console\n","    filemode=\"w\"\n",")\n","\n","logging.debug(\"This is a debug message\")\n","logging.info(\"Application started\")\n","logging.warning(\"Low disk space\")\n","logging.error(\"File not found\")\n","logging.critical(\"System crash\")\n"]},{"cell_type":"markdown","metadata":{"id":"U0S7GmSFVwd4"},"source":["Q11.What is memory management in Python?\n","anns-\n","\n","\n","**MEMORY MANAGEMENT IN PYTHON:**\n","\n","\n","\n","\n","    Memory management in Python means how Python allocates, uses, and frees\n","\n","    memory for variables, objects, and data structures while the program runs.\n","\n","    Python does this automatically through its memory manager and garbage collector.\n","\n","**KEY COMPONENTS:**\n","\n","    1.Private Heap Space\n","\n","\n","\n","    All Python objects and data are stored in a private heap.\n","\n","\n","    This memory is managed by Python’s memory manager, not directly accessible to programmers.\n","\n","**2.Memory Manager:**\n","\n","\n","    Responsible for allocating and deallocating memory for objects.\n","\n","\n","    Keeps track of all Python objects.'\n","\n","\n","\n","**3.Garbage Collection:**\n","\n","    Python uses automatic garbage collection to free memory that is no longer in use.\n","\n","\n","    The main technique is reference counting:\n","\n","\n","    Each object keeps track of how many references point to it.\n","\n","\n","    When the reference count drops to zero → object is deleted.\n","\n","\n","    For circular references (objects referencing each other), Python also uses a cyclic garbage collector\n","\n","**4.Dynamic Typing:**\n","\n","    Since Python is dynamically typed, variables don’t have fixed memory sizes.\n","\n","\n","    The interpreter decides memory allocation at runtime.\n","\n","**5.Memory Pools (PyMalloc):**\n","\n","    For efficiency, Python maintains pools of memory blocks.\n","    \n","\n","    This reduces overhead of requesting memory from the operating system repeatedly."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1757519912542,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"8F_vI6uyWXgR","outputId":"faedb489-6bd0-46ba-95e8-79932c35cd0b"},"outputs":[{"name":"stdout","output_type":"stream","text":["3\n"]}],"source":["#example\n","import sys\n","\n","a = [1, 2, 3]\n","b = a    # another reference to the same list\n","print(sys.getrefcount(a))  # shows how many references exist\n","\n"]},{"cell_type":"markdown","metadata":{"id":"09dR7ryMWfIS"},"source":["Q12.What are the basic steps involved in exception handling in Python?\n","\n","\n","ans\n","\n","When writing code in Python, you use try-except blocks to handle exceptions. The main steps are:\n","\n","    . Wrap risky code in a try block:\n","    \n","    Place the code that might raise an exception inside a try block.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1757520162917,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"uD8DasmCWvn3","outputId":"6271e4eb-a1c7-4255-bfa7-e676af6c1361"},"outputs":[{"name":"stdout","output_type":"stream","text":["Invalid conversion to integer\n"]}],"source":["try:\n","    num = int(\"abc\")\n","except ValueError:\n","    print(\"Invalid conversion to integer\")\n","\n"]},{"cell_type":"markdown","metadata":{"id":"RGlAZWUKXall"},"source":["**(Optional) Use finally block:**\n","\n","    Code inside finally runs always, whether an exception occurred or not.\n","\n","    Useful for cleanup (e.g., closing files, releasing resources)."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1757520256618,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"jTz3Cnr-XgtA","outputId":"af71fab3-0874-4244-cd4e-166acdc5e950"},"outputs":[{"name":"stdout","output_type":"stream","text":["File not found!\n","Closing file...\n"]}],"source":["file = None\n","try:\n","    file = open(\"data.txt\", \"r\")\n","    content = file.read()\n","except FileNotFoundError:\n","    print(\"File not found!\")\n","else:\n","    print(\"File read successfully.\")\n","finally:\n","    print(\"Closing file...\")\n","    if file is not None:\n","        file.close()"]},{"cell_type":"markdown","metadata":{"id":"gdQNwoioXyHM"},"source":["**SUMMAY OF STEPS**\n","\n","\n","    try → Write risky code.\n","\n","\n","    except → Handle the error if it occurs.\n","\n","\n","    else (optional) → Run code if no error happened.\n","\n","\n","    finally (optional) → Run cleanup code (always executes)."]},{"cell_type":"markdown","metadata":{"id":"YDT4x0CDX9qs"},"source":["Q13.Why is memory management important in Python?\n","\n","ans-\n","    Without proper memory management, you can face challenges while building these applications, as effective memory allocation is necessary in order to avoid problems that can arise when you run out of memory, such as memory leaks.\n"]},{"cell_type":"markdown","metadata":{"id":"ZY4f4PPKYXXv"},"source":["Q14.What is the role of try and except in exception handling?\n","\n","ans-\n","\n","\n","**1.TRY BLOCK**\n","\n","    The try block contains code that might raise an exception.\n","\n","    Python tests this block first.\n","\n","    If an exception occurs → it jumps immediately to the corresponding except block.\n","\n","    if no exception occurs → the code runs normally."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":95,"status":"ok","timestamp":1757520550445,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"tj2OBatRYnB4","outputId":"169728cb-4e5d-4c45-8b1a-1b88792d8a08"},"outputs":[{"name":"stdout","output_type":"stream","text":["An error occurred: division by zero\n"]}],"source":["#example\n","try:\n","    x = 10 / 0   # risky code (ZeroDivisionError)\n","    print(\"This will not run\")\n","except Exception as e:\n","    print(f\"An error occurred: {e}\")"]},{"cell_type":"markdown","metadata":{"id":"-q0DspGwY6A4"},"source":["2. **except BLOCK:**\n","\n","\n","    he except block defines how to handle an exception.\n","\n","    If an exception is raised in the try block, control passes here.\n","\n","    You can handle specific exceptions or multiple types of errors\n","example\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1757520651667,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"ssIJdcXsZL1F","outputId":"bc8dd6db-1075-44eb-835f-8b4bb071063f"},"outputs":[{"name":"stdout","output_type":"stream","text":["You cannot divide by zero!\n"]}],"source":["try:\n","    x = 10 / 0\n","except ZeroDivisionError:\n","    print(\"You cannot divide by zero!\")"]},{"cell_type":"markdown","metadata":{"id":"xZy9Rsc1ZQt-"},"source":["**TOGATHER: try + except:**\n","\n","\n","    try → Attempt to run risky code.\n","\n","    except → Catch errors and prevent program crash.\n","    \n","example"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1757520687214,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"sZVUo4DLZWQ0","outputId":"3186e5df-f833-4dc1-f890-634055919880"},"outputs":[{"name":"stdout","output_type":"stream","text":["Invalid input! Please enter a number.\n"]}],"source":["try:\n","    num = int(\"abc\")   # risky conversion\n","except ValueError:\n","    print(\"Invalid input! Please enter a number.\")\n"]},{"cell_type":"markdown","metadata":{"id":"zwH4n7bvZf15"},"source":["Q15.How does Python's garbage collection system work?\n","\n","ans-\n","\n","\n","    Python uses a combination of reference counting and a cyclic garbage\n","    \n","    collector to manage memory automatically.\n","**1.REFRENCE COUNTING:**\n","\n","\n","    Every Python object keeps track of how many references (variables,\n","    \n","    containers, etc.) are pointing to it.\n","\n","    This count is stored in the object’s reference counter.\n","\n","    When the reference count becomes zero, the memory is immediately freed.\n","\n","EXAMPLE:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":58,"status":"ok","timestamp":1757520792032,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"ENzPK7eyZvlh","outputId":"c5581dca-f76c-4073-f3fb-1524f7980859"},"outputs":[{"name":"stdout","output_type":"stream","text":["2\n","3\n","2\n"]}],"source":["import sys\n","\n","a = [1, 2, 3]\n","print(sys.getrefcount(a))  # shows reference count\n","\n","b = a   # new reference\n","print(sys.getrefcount(a))\n","\n","del a   # one reference removed\n","print(sys.getrefcount(b))  # still alive because 'b' points to it\n"]},{"cell_type":"markdown","metadata":{"id":"b9bx9wPyZzth"},"source":["2. **PROBLEM WITH REFRENCE COUNTING** → Circular References\n","\n","    Sometimes objects reference each other, creating a cycle.\n","\n","EXAMPLE:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_MCQzCE7Z3T0"},"outputs":[],"source":["a = []\n","b = [a]\n","a.append(b)  # a references b, and b references a\n"]},{"cell_type":"markdown","metadata":{"id":"YQa3xGmhaCRx"},"source":[" 3.**CYCLIC GARBAGE COLLECTOR:**\n","\n","\n","\n","    To handle circular references, Python has a cyclic garbage collector (part of the gc module).\n","\n","    It:\n","\n","    Scans for groups of objects that reference each other but are no longer accessible.\n","\n","    Breaks these cycles and frees memory.\n","\n","  4. **GENERATIONAL GARBAGE COLLECTION:**\n","\n","\n","\n","    Python divides objects into generations (0, 1, 2).\n","\n","    New objects start in generation 0.\n","\n","    If they survive garbage collection, they move to an older generation.\n","\n","    Objects in older generations are collected less frequently, because they are more likely to be long-lived.\n","\n","    Gen 0 → collected most often\n","\n","    Gen 2 → collected least often\n","\n"," 5.**MANNUAL CONTROL (optional)**\n","\n","    Developers can interact with garbage collection using the gc module.\n","\n","EXAMPLE:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p-XevjROamrN"},"outputs":[],"source":["import gc\n","\n","gc.collect()        # forces garbage collection\n","gc.disable()        # turn off automatic GC (not recommended usually)\n","gc.enable()         # re-enable it\n"]},{"cell_type":"markdown","metadata":{"id":"BfqOxLoYa0QQ"},"source":["Q16.What is the purpose of the else block in exception handling?\n","\n","\n","ans-\n","\n","\n","**PURPOSE**\n","\n","    The else block contains code that should run only if no exceptions occur in the try block.\n","\n"," **KEY POINTS:**\n","\n","    The else block runs only when the try block succeeds without errors.\n","\n","\n","    It is often used for code that should execute only when everything goes\n","    well inside try.\n","    \n","\n","    It helps keep the try block focused on risky operations (like file I/O, division, etc.), while moving the \"safe\" follow-up logic into else."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3824,"status":"ok","timestamp":1757521291318,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"1jOVhTC5bkNc","outputId":"3e71021c-e4f4-41b5-f1fd-c4210035ae5f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Enter a number: 6\n","Success! The result is: 1.6666666666666667\n"]}],"source":["#example\n","try:\n","    num = int(input(\"Enter a number: \"))\n","    result = 10 / num\n","except ZeroDivisionError:\n","    print(\"You can't divide by zero!\")\n","except ValueError:\n","    print(\"Invalid input, please enter a number.\")\n","else:\n","    print(\"Success! The result is:\", result)"]},{"cell_type":"markdown","metadata":{"id":"-s8R3I3Ib1F4"},"source":["What **are** the common logging levels in Python?\n","\n","ans-\n","\n","    Python's logging module defines several standard logging levels to\n","\n","    categorize the severity of events. These levels are hierarchical, meaning\n","\n","    that when you set a logger to a specific level, it will process messages at that level and all higher (more severe) levels.\n","\n","\n","    The common logging levels in Python, from lowest to highest severity, are:\n","\n","\n","\n","\n","---\n","**DEBUG (10):**\n","\n","\n","    Provides detailed information, typically useful only when diagnosing problems during development or troubleshooting.\n","\n","\n","\n"," **INFO (20):**\n","\n","\n","    Confirms that things are working as expected and provides general\n","    \n","    information about the application's flow.\n","\n"," **WARNING (30):**\n","\n","\n","    Indicates that something unexpected happened or that a potential problem\n","    \n","    might arise in the near future (e.g., low disk space). The software is\n","    \n","    still functioning as expected.\n","\n","**ERROR (40):**\n","\n","\n","    Signifies a more serious problem that has prevented the software from\n","    \n","    \n","    performing some function.\n","\n","\n","\n","**CRITICAL (50):**\n","\n","\n","    Represents a severe error, indicating that the program itself may be unable\n","    \n","    \n","    to continue running or that a catastrophic failure has occurred.\n","\n","\n","    Oops, something went wrong."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":68,"status":"ok","timestamp":1757522282449,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"pK7K-oQwdF7i","outputId":"b26d1b32-2431-4711-bd1b-fc59a62d1b3c"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:root:Careful this button is insert chaos\n","ERROR:root:Laugh.exe has crashed\n","CRITICAL:root:Fatal error with no error\n"]}],"source":["import logging\n","logging.basicConfig(level=logging.DEBUG)\n","\n","logging.debug(\"Kilory was here\")\n","logging.info(\"Never let a computer know you are in hurry\")\n","logging.warning(\"Careful this button is insert chaos\")\n","logging.error(\"Laugh.exe has crashed\")\n","logging.critical(\"Fatal error with no error\")\n"]},{"cell_type":"markdown","metadata":{"id":"QEGaCEYBfjBe"},"source":["Q18.What is the difference between os.fork() and multiprocessing in Python?\n","\n","ans-\n","\n","\n","**os.fork()**\n","\n","**Definition:**\n","\n","    A low-level system call (available only on Unix/Linux/macOS, not on Windows).\n","\n","**What it does:**\n","\n","    Creates a new child process by duplicating the current process.\n","\n","    The child process is an exact copy of the parent, except for the returned process ID (pid).\n","\n","    It doesn’t provide built-in tools for process management, communication, or synchronization.\n","\n","**Multiprocessing module:**\n","\n","\n","**Definition:**\n","\n","    A high-level Python module for process-based parallelism.\n","\n","\n","    Cross-platform: Works on Windows, macOS, and Linux (unlike os.fork()).\n","\n","\n","    Provides abstractions like Process, Pool, Queue, and Pipe to make process management easier.\n","\n","\n","    Automatically handles data sharing and synchronization between processes.\n","\n","\n","    Safer and more portable than os.fork()\n","\n","\n","\n","\n","\n","    "]},{"cell_type":"markdown","metadata":{"id":"mkPG7c8CgSPp"},"source":["Q19. What is the importance of closing a file in Python\n","\n","ans-\n","\n","**IMPORTANCE OF CLOSING A FILE:**\n","\n","\n","1.Resource Management:\n","\n","\n","\n","When you open a file, the operating system allocates resources (like memory buffers and file descriptors).\n","\n","\n","\n","If you don’t close it, these resources remain locked and unavailable until the program ends.\n","\n","\n","2.saves data properly\n","\n","When writing to a file, data is often stored in a temporary buffer before being written to disk.\n","\n","Closing the file ensures that all buffered data is flushed (actually written to the file). Without closing, some data might never be saved.\n","\n","3.prevent file corruption:\n","\n","If a file isn’t properly closed, it can lead to incomplete writes or corruption, especially in large files.\n","\n","\n","example\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ai4-iG6_gs89"},"outputs":[],"source":["f = open(\"data.txt\", \"w\")\n","f.write(\"Hello, World!\")\n","f.close()   # Ensures \"Hello, World!\" is actually written to the file\n","\n","\n","\n","\n","#A safer way is to use the with statement, which closes the file automatically:\n","\n","\n","\n","with open(\"data.txt\", \"w\") as f:\n","    f.write(\"Hello, World!\")\n","# No need to call f.close()"]},{"cell_type":"markdown","metadata":{"id":"UTUroR88g4lt"},"source":["Q20.What is the difference between file.read() and file.readline() in Python?\n","\n","\n","ans-\n","\n","    in Python, file.read() and file.readline() are methods used to read data\n","    \n","    \n","    from a file, but they differ in the amount of data they retrive\n","\n","**file.read(size)**:\n","\n","\n","\n","    This method reads the entire content of the file and returns it as a single\n","     \n","    string. If an optional size argument is provided, it reads up to size\n","  \n","    bytes (or characters in text mode) from the file and returns them as a\n","    \n","    string. If size is omitted, the entire file content is read.\n","\n","\n","example\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R5yJw5QShpCQ"},"outputs":[],"source":["    with open(\"example.txt\", \"r\") as f:\n","        content = f.read()  # Reads the entire file content"]},{"cell_type":"markdown","metadata":{"id":"zY1BNFitht5S"},"source":["**file.readline(size)**:\n","\n","\n","    This method reads a single line from the file and returns it as a string.\n","\n","    A line is typically defined as a sequence of characters ending with a\n","    \n","    newline character (\\n). If an optional size argument is provided, it reads\n","    \n","    up to size bytes (or characters in text mode) of the line, or until a\n","    \n","    newline character is encountered, whichever comes first.\n","    \n","    If the end of the file is reached and no more lines are available, it returns an empty string.\n","\n","\n","\n","**Key Differences:**\n","\n","\n","\n","**Scope of Reading: **\n","\n","\n","\n","    read() reads the entire file (or a specified number of bytes),\n","    \n","    \n","    while readline() reads a single line at a time.\n","\n","\n","**Return Type:**\n","\n","    Both methods return a string.\n","\n","\n","\n","**Memory Usage:**\n","\n","    read() can consume significant memory if used on large files, as it loads the entire content into memory.\n","\n","    readline() is more memory-efficient for large files as it processes data line by line.\n","\n","\n","\n","**Use Cases:**\n","\n","\n","    read() is suitable for smaller files where the entire content is needed at\n","   \n","    once. readline() is better for processing large files line by line, or\n","     \n","    when you need to iterate through the file's content line by line."]},{"cell_type":"markdown","metadata":{"id":"bGGS2foejTU4"},"source":["Q21.What is the logging module in Python used for?\n","\n","ans-\n","\n","\n","The logging module in Python is used to record (or log) messages from your program while it runs. It’s a built-in module that helps track events, errors, warnings, or other information, which is very useful for debugging and monitoring.\n","\n","**Why use logging instead of print()**\n","\n","    print() is okay for quick checks, but logging is more powerful because:\n","\n","    It can record messages with different severity levels (DEBUG, INFO, WARNING, ERROR, CRITICAL).\n","\n","    It can save logs to a file, not just the console.\n","\n","    It gives more control (formatting, timestamps, log rotation, etc.)\n","    \n","    example"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1757523521323,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"F5u3IratjopP","outputId":"da502077-66b0-4122-e689-944c47a612f2"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:root:This is a warning message\n","ERROR:root:This is an error message\n","CRITICAL:root:This is a critical message\n"]}],"source":["import logging\n","logging.basicConfig(level=logging.DEBUG)\n","logging.debug(\"This is a debug message\")\n","logging.info(\"This is an info message\")\n","logging.warning(\"This is a warning message\")\n","logging.error(\"This is an error message\")\n","logging.critical(\"This is a critical message\")"]},{"cell_type":"markdown","metadata":{"id":"tg2-SkEZkVTP"},"source":["COMMON USES OF LOGGING\n","\n","1.Debugging – See what your program is doing step by step.\n","\n","2.Error tracking – Record errors to investigate later.\n","\n","3.Monitoring – Keep logs of important events in production systems.\n","\n","4.File logging – Store logs for audit or troubleshooting.\n","\n","\n","example"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1757523588729,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"bnsteXdVkZZ3","outputId":"473a710c-d9c1-4fcd-ef81-97eb9bbb640e"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:root:Low disk space\n","ERROR:root:File not found\n"]}],"source":["logging.basicConfig(filename=\"app.log\", level=logging.INFO,\n","                    format=\"%(asctime)s - %(levelname)s - %(message)s\")\n","\n","logging.info(\"Application started\")\n","logging.warning(\"Low disk space\")\n","logging.error(\"File not found\")\n"]},{"cell_type":"markdown","metadata":{"id":"20R-LxyykjxI"},"source":["Q22.What is the os module in Python used for in file handling?\n","\n","ans-\n","\n","The os module in Python provides functions to interact with the operating system, and it is very useful in file handling. It allows you to work with files and directories beyond just opening and reading/writing them.\n","\n","\n","\n","**Uses of os module in file handling**\n","\n","1.WORKING WITH DIRECTORIES (folders)\n","\n","\n","    os.getcwd() → Get current working directory.\n","\n","    os.chdir(path) → Change current working directory.\n","\n","    os.listdir(path) → List files and directories in a given path.\n","\n","2.**Creating and removing directories**\n","\n","    os.mkdir(\"folder\") → Create a new folder.\n","\n","    os.makedirs(\"path/to/folder\") → Create nested folders.\n","\n","    os.rmdir(\"folder\") → Remove a folder (if empty).\n","\n","    os.removedirs(\"path/to/folder\") → Remove nested folders.\n","\n","3.**FILE OPERATIONS**\n","\n","    os.remove(\"file.txt\") → Delete a file.\n","\n","    os.rename(\"old.txt\", \"new.txt\") → Rename a file.\n","\n","    os.path.exists(\"file.txt\") → Check if a file exists.\n","\n","    os.path.getsize(\"file.txt\") → Get file size."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1757523800065,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"U_FhCRmalKyB","outputId":"9b7cb77f-d7fb-424c-dc6b-3229f5e920d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Current directory: /content\n","Folder renamed successfully!\n"]}],"source":["import os\n","\n","# Get current working directory\n","print(\"Current directory:\", os.getcwd())\n","\n","# Create a folder\n","os.mkdir(\"test_folder\")\n","\n","# Rename it\n","os.rename(\"test_folder\", \"renamed_folder\")\n","\n","# Check if it exists\n","if os.path.exists(\"renamed_folder\"):\n","    print(\"Folder renamed successfully!\")\n","\n","# Remove it\n","os.rmdir(\"renamed_folder\")"]},{"cell_type":"markdown","metadata":{"id":"3-km2438BpRE"},"source":["Q23.What are the challenges associated with memory management in Python?\n","\n","ans-\n","\n","**CHALLENGES IN PYTHON MEMORY MANAGEMENT**\n","\n","1.**Reference Cycles** (Circular References)\n","\n","    If two or more objects reference each other, they create a cycle.\n","\n","    Example:\n","\n","    a = []\n","    b = [a]\n","    a.append(b)   # a → b → a (cycle)\n","\n","\n","2.**Memory Leaks**\n","\n","    Even though Python manages memory, poorly written code (e.g., keeping\n","    \n","    unnecessary references, global variables, or large caches) can lead to\n","    \n","    memory not being freed.\n","\n","3.**Fragmentation**\n","\n","    Python’s memory allocator (pymalloc) can cause fragmentation over time,\n","\n","    where free memory is scattered in small chunks, making it less efficient\n","    \n","    for large allocations.\n","\n","4.**Objects Not Immediately Freed**\n","\n","    Python uses reference counting, so an object’s memory is only released when\n","    \n","    its reference count drops to zero.\n","\n","\n","    If references are unintentionally kept, memory remains occupied longer than expected.\n","\n","5.**Large Data Handling**\n","\n","    Working with large datasets (e.g., big lists, dictionaries, NumPy arrays)\n","    \n","    can quickly exhaust available memory.\n","\n","    Copying large objects instead of referencing them makes this worse.\n","\n","6.**Overhead of Objects**\n","\n","    Every Python object carries extra metadata (like reference count, type\n","\n","    info), which makes them more memory-heavy compared to low-level languages like C.\n","\n","7.**Global Interpreter Lock (GIL) Issues**\n","\n","    While not directly a memory leak, the GIL limits true parallelism in\n","    \n","    threads, which sometimes pushes developers toward multiprocessing\n","\n","    Multiprocessing creates separate memory spaces, increasing total memory usage.\n","\n","8.**third-Party Extensions**\n","\n","    Libraries written in C/C++ (via Cython, ctypes, etc.) may not properly free\n","    \n","    \n","    memory, leading to leaks that Python’s garbage collector cannot handle."]},{"cell_type":"markdown","metadata":{"id":"maxjVm7sCqQ0"},"source":["Q24. How do you raise an exception manually in Python?\n","\n","ans-\n","\n","\n","\n","✅ **KEY POINT:**\n","\n","**Use raise to trigger exceptions**.\n","\n","    You can raise built-in exceptions (ValueError, TypeError,\n","    \n","    ZeroDivisionError, etc.) or custom exceptions (user-defined classes\n","    \n","    inheriting from Exception).\n","\n","    In Python, you can raise an exception manually using the raise keyword.\n","\n","**SYNTAX: raise ExceptionType(\"Error message\")**"]},{"cell_type":"markdown","metadata":{"id":"F27mmV8mC3AC"},"source":["example 1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":74,"status":"ok","timestamp":1757598725372,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"a3euxCybC40l","outputId":"a8fb530f-65aa-41bb-ab90-b14428930d74"},"outputs":[{"name":"stdout","output_type":"stream","text":["x cannot be negative\n"]}],"source":["x = -5\n","try:\n","    if x < 0:\n","        raise ValueError(\"x cannot be negative\")\n","except ValueError as e:\n","    print(e)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":40,"status":"ok","timestamp":1757599489089,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"B1bod0VKDEaf","outputId":"aed8b373-0414-4d75-c8c3-fa314f899d32"},"outputs":[{"name":"stdout","output_type":"stream","text":["Caught a custom error: This is a custom error!\n"]}],"source":["#example 2 raising a custom exception\n","\n","\n","class MyError(Exception):\n","  pass\n","\n","try:\n","    raise MyError(\"This is a custom error!\")\n","except MyError as e:\n","    print(f\"Caught a custom error: {e}\")\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"kj2zKq3pF-jp"},"source":["Q23.What are the challenges associated with memory management in Python?\n","\n","\n","ans-\n","CHALLENGES IN PYTHON MEMORY MANAGEMENT\n","\n","1.**Reference Cycles (Circular References)**\n","\n","    If two or more objects reference each other, they create a cycle.\n","\n","    Example:\n","\n","    a = []\n","    b = [a]\n","    a.append(b)   # a → b → a (cycle)\n","\n","2.**Memory Leaks**\n","\n","    Even though Python manages memory, poorly written code (e.g., keeping\n","    \n","    unnecessary references, global variables, or large caches) can lead to\n","    \n","    memory not being freed.\n","\n","3.**Fragmentation**\n","\n","    Python’s memory allocator (pymalloc) can cause fragmentation over time,\n","    \n","    where free memory is scattered in small chunks, making it less efficient\n","     \n","      for large allocations.\n","\n","4.**Objects Not Immediately Freed**\n","\n","    Python uses reference counting, so an object’s memory is only released when\n","    \n","    its reference count drops to zero.\n","\n","    If references are unintentionally kept, memory remains occupied longer than expected.\n","\n","5.**Large Data Handling**\n","\n","    \n","    Working with large datasets (e.g., big lists, dictionaries, NumPy arrays)\n","    \n","    can quickly exhaust available memory.\n","\n","    Copying large objects instead of referencing them makes this worse.\n","\n","6.**Overhead of Objects**\n","\n","    Every Python object carries extra metadata (like reference count, type\n","    \n","    \n","    info), which makes them more memory-heavy compared to low-level languages like C.\n","\n","7.**Global Interpreter Lock (GIL) Issues**\n","\n","    While not directly a memory leak, the GIL limits true parallelism in\n","    \n","    threads, which sometimes pushes developers toward multiprocessing\n","\n","    Multiprocessing creates separate memory spaces, increasing total memory usage.\n","\n","8.**hird-Party Extensions**\n","\n","    Libraries written in C/C++ (via Cython, ctypes, etc.) may not properly free\n","    \n","    \n","    memory, leading to leaks that Python’s garbage collector cannot handle."]},{"cell_type":"markdown","metadata":{"id":"vDI1iLymJ-mD"},"source":["Q24. How do you raise an exception manually in Python?\n","\n","ans-\n","\n","\n","✅ KEY POINT:\n","\n","**Use raise to trigger exceptions.**\n","\n","You can raise built-in exceptions (ValueError, TypeError, ZeroDivisionError, etc.) or custom exceptions (user-defined classes inheriting from Exception).\n","\n","In Python, you can raise an exception manually using the raise keyword.\n","\n","SYNTAX: raise ExceptionType(\"Error message\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":71,"status":"ok","timestamp":1757600589412,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"S0mtByZnKJit","outputId":"771a8063-4f91-4e50-94e0-7dc10390f0c0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Caught an error: Negative values are not allowed!\n"]}],"source":["# Manually raising a ValueError\n","x = -5\n","try:\n","    if x < 0:\n","        raise ValueError(\"Negative values are not allowed!\")\n","except ValueError as e:\n","    print(f\"Caught an error: {e}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":64,"status":"ok","timestamp":1757600616772,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"1v94W4kJKM7K","outputId":"5081f56f-9d44-4698-d315-38e7206bc7be"},"outputs":[{"name":"stdout","output_type":"stream","text":["Caught a custom error: This is a custom error!\n"]}],"source":["#Example 2: Raising a custom exception\n","\n","\n","# Define a custom exception\n","class MyError(Exception):\n","    pass\n","\n","# Manually raise it and handle it\n","try:\n","    raise MyError(\"This is a custom error!\")\n","except MyError as e:\n","    print(f\"Caught a custom error: {e}\")"]},{"cell_type":"markdown","metadata":{"id":"38FBV8JGKU-I"},"source":["Q25.Why is it important to use multithreading in certain applications?\n","\n","ans-\n","\n","\n","multithreading is important in certain applications because it allows a program to perform multiple tasks concurrently within the same process, improving performance and responsiveness.\n","\n","1.**Improved Responsiveness**\n","\n","    In applications with a user interface (e.g., GUI apps, games, or web apps),\n","    \n","    multithreading keeps the interface responsive.\n","\n","    example: One thread handles user input while another performs background calculations.\n","\n","2**Concurrency for I/O-bound tasks**\n","\n","    Multithreading is especially useful for tasks that spend a lot of time\n","\n","  \n","    waiting (e.g., reading files, making network requests, database queries).\n","\n","\n","    Instead of blocking the entire program, threads can run other tasks during the wait time.\n","\n","3.**Better Resource Utilization**\n","\n","\n","    Threads can make better use of CPU idle time, especially when one thread is\n","    \n","    \n","    waiting for I/O operations.\n","\n","4.**Parallel Execution (in some cases)**\n","\n","    While Python has the Global Interpreter Lock (GIL) (which limits true\n","    \n","    CPU-bound parallelism in threads), threads can still overlap I/O operations.\n","\n","    In other languages (like Java or C++), multithreading allows true CPU-level parallelism.\n","\n","5.**Simplifies Program Structur**e\n","\n","    Instead of writing complex event-driven code, threads let you write\n","    \n","    straightforward logic where tasks run \"in parallel.\"\n","\n","6.**Background Processing**\n","\n","    Long-running tasks (e.g., downloading files, logging, background\n","    \n","    monitoring) can run in separate threads without blocking the main thread.\n","\n","    example without vs with thread\n","\n","    "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5856,"status":"ok","timestamp":1757602039595,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"8QusxmV9PomN","outputId":"08f663d4-1a2d-48ad-fa50-50d46cf9b1de"},"outputs":[{"name":"stdout","output_type":"stream","text":["Task 1 started\n","Task 1 finished\n","Task 2 started\n","Task 2 finished\n","Task 1 started\n","Task 2 started\n","Task 1 finished\n","Task 2 finished\n"]}],"source":["import threading\n","import time\n","\n","def task(name):\n","    print(f\"Task {name} started\")\n","    time.sleep(2)\n","    print(f\"Task {name} finished\")\n","\n","# Without threads (sequential)\n","task(1)\n","task(2)\n","\n","# With threads (concurrent)\n","t1 = threading.Thread(target=task, args=(1,))\n","t2 = threading.Thread(target=task, args=(2,))\n","t1.start()\n","t2.start()\n","t1.join()\n","t2.join()\n","\n"]},{"cell_type":"markdown","metadata":{"id":"0-u8Kat7XLOx"},"source":["**PRACTICAL**"]},{"cell_type":"markdown","metadata":{"id":"fB_T7Jq-Xz7D"},"source":["\n","1.How can you open a file for writing in Python and write a string to it"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":58,"status":"ok","timestamp":1757604192667,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"rdlsT6jiX2TD","outputId":"b2f7cddc-f276-4cb4-b08a-48f13c83f3aa"},"outputs":[{"name":"stdout","output_type":"stream","text":["String successfully written to my_file.txt\n"]}],"source":["# Open a file named 'my_file.txt' in write mode ('w')\n","# Using a 'with' statement ensures the file is automatically closed\n","with open('my_file.txt', 'w') as file:\n","    # Write a string to the file\n","    file.write(\"Hello, this is a test string written to the file.\")\n","\n","print(\"String successfully written to my_file.txt\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":33,"status":"ok","timestamp":1757604215545,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"Uk15JGweX8xW","outputId":"22e03ef2-0504-4a62-921d-0eca08caa8a8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Hello, this is a test string written to the file."]}],"source":["2.# Write a Python program to read the contents of a file and print each line\n","\n","try:\n","    # Open the file in read mode ('r')\n","    with open('my_file.txt', 'r') as file:\n","        # Read and print each line\n","        for line in file:\n","            print(line, end='') # Use end='' to avoid extra newlines\n","\n","except FileNotFoundError:\n","    print(\"Error: The file 'my_file.txt' was not found.\")\n","except Exception as e:\n","    print(f\"An error occurred: {e}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1757604237306,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"Awyho_2bYD1v","outputId":"fd768538-9107-4fdf-c548-dbf9d823f188"},"outputs":[{"name":"stdout","output_type":"stream","text":["Error: The file was not found.\n"]}],"source":["3.# How would you handle a case where the file doesn't exist while trying to open it for reading?\n","\n","try:\n","    # Attempt to open a file that might not exist\n","    with open('non_existent_file.txt', 'r') as file:\n","        content = file.read()\n","        print(content)\n","except FileNotFoundError:\n","    # Handle the case where the file is not found\n","    print(\"Error: The file was not found.\")\n","except Exception as e:\n","    # Handle any other potential exceptions\n","    print(f\"An unexpected error occurred: {e}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1757604254573,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"A9gz2Hh7YIfI","outputId":"a1b9f8ad-c993-4baa-bf58-26455ab67f09"},"outputs":[{"name":"stdout","output_type":"stream","text":["Content successfully copied from my_file.txt to copied_file.txt\n"]}],"source":["4.# Write a Python script that reads from one file and writes its content to another file?\n","\n","try:\n","    # Open the source file in read mode ('r')\n","    with open('my_file.txt', 'r') as source_file:\n","        # Read the entire content of the source file\n","        content = source_file.read()\n","\n","    # Open the destination file in write mode ('w')\n","    with open('copied_file.txt', 'w') as destination_file:\n","        # Write the content to the destination file\n","        destination_file.write(content)\n","\n","    print(\"Content successfully copied from my_file.txt to copied_file.txt\")\n","\n","except FileNotFoundError:\n","    print(\"Error: The source file 'my_file.txt' was not found.\")\n","except Exception as e:\n","    print(f\"An error occurred: {e}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4388,"status":"ok","timestamp":1757604275484,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"LQ75c9tiYMGz","outputId":"1a8fdaac-6e20-481f-8bd7-ee9d4f9a1242"},"outputs":[{"name":"stdout","output_type":"stream","text":["Enter a denominator (cannot be zero): 55\n","The result of the division is: 0.18181818181818182\n"]}],"source":["5.# How would you catch and handle division by zero error in Python?\n","\n","try:\n","    # Attempt a division that might result in a ZeroDivisionError\n","    numerator = 10\n","    denominator = int(input(\"Enter a denominator (cannot be zero): \"))\n","    result = numerator / denominator\n","    print(f\"The result of the division is: {result}\")\n","except ZeroDivisionError:\n","    # Handle the case where division by zero occurs\n","    print(\"Error: Cannot divide by zero!\")\n","except ValueError:\n","    # Also handle cases where the input is not a valid number\n","    print(\"Error: Invalid input. Please enter a valid number.\")\n","except Exception as e:\n","    # Handle any other unexpected errors\n","    print(f\"An unexpected error occurred: {e}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":70,"status":"ok","timestamp":1757604336357,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"0XtcbEsWYV_A","outputId":"ccae9c5e-0cb9-4191-fe17-840aa6de232a"},"outputs":[{"name":"stderr","output_type":"stream","text":["ERROR:root:Attempted to divide by zero!\n"]},{"name":"stdout","output_type":"stream","text":["Result of division: 5.0\n","Error: Attempted to divide by zero!\n","Result of division: 5.0\n"]},{"data":{"text/plain":["5.0"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["6.# Write a Python program that logs an error message to a log file when a division by zero exception occurs?\n","\n","import logging\n","\n","# Configure logging\n","logging.basicConfig(\n","    filename='error.log',  # Name of the log file\n","    level=logging.ERROR,   # Log messages with severity ERROR and above\n","    format='%(asctime)s - %(levelname)s - %(message)s' # Format of log messages\n",")\n","\n","def divide_numbers(numerator, denominator):\n","    \"\"\"\n","    Divides two numbers and logs an error if a ZeroDivisionError occurs.\n","    \"\"\"\n","    try:\n","        result = numerator / denominator\n","        print(f\"Result of division: {result}\")\n","        return result\n","    except ZeroDivisionError:\n","        error_message = \"Attempted to divide by zero!\"\n","        logging.error(error_message) # Log the error message\n","        print(f\"Error: {error_message}\")\n","        return None\n","\n","# Test cases\n","divide_numbers(10, 2)\n","divide_numbers(5, 0)\n","divide_numbers(20, 4)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":64,"status":"ok","timestamp":1757604388224,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"wiA7va3UYpMF","outputId":"310ddb24-4acc-43c5-865f-931ef3d4b06b"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:root:This is a warning message\n","ERROR:root:This is an error message\n","CRITICAL:root:This is a critical message\n"]}],"source":["7. # How do you log information at different levels (INFO, ERROR, WARNING) in Python using the logging module?\n","\n","\n","\n","import logging\n","\n","# Configure logging\n","# Set the level to DEBUG to see messages from all levels\n","logging.basicConfig(level=logging.DEBUG)\n","\n","logging.debug(\"This is a debug message\")\n","logging.info(\"This is an info message\")\n","logging.warning(\"This is a warning message\")\n","logging.error(\"This is an error message\")\n","logging.critical(\"This is a critical message\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":33,"status":"ok","timestamp":1757604415455,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"G0KczqHAYvqQ","outputId":"02fae84e-8b29-471c-cad9-ae86a63de009"},"outputs":[{"name":"stdout","output_type":"stream","text":["Error: The file was not found.\n"]}],"source":["8. # Write a program to handle a file opening error using exception handling\n","\n","try:\n","    # Attempt to open a file that might not exist or have permission issues\n","    with open('another_non_existent_file.txt', 'r') as file:\n","        content = file.read()\n","        print(content)\n","except FileNotFoundError:\n","    # Handle the case where the file is not found\n","    print(\"Error: The file was not found.\")\n","except IOError:\n","    # Handle other potential I/O errors (like permission issues)\n","    print(\"Error: Could not read the file due to an I/O error.\")\n","except Exception as e:\n","    # Handle any other unexpected exceptions\n","    print(f\"An unexpected error occurred: {e}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1757604430266,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"zQW3QVLFYxfr","outputId":"2d73b682-eeae-4483-90fb-94b1405477ba"},"outputs":[{"name":"stdout","output_type":"stream","text":["Content of the file as a list:\n","['Hello, this is a test string written to the file.']\n"]}],"source":["9. # How can you read a file line by line and store its content in a list in Python?\n","\n","try:\n","    # Open the file in read mode ('r')\n","    with open('my_file.txt', 'r') as file:\n","        # Read all lines into a list\n","        lines = file.readlines()\n","\n","    # Print the list of lines\n","    print(\"Content of the file as a list:\")\n","    print(lines)\n","\n","except FileNotFoundError:\n","    print(\"Error: The file 'my_file.txt' was not found.\")\n","except Exception as e:\n","    print(f\"An error occurred: {e}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1757604444923,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"rmPv7FTdY2-P","outputId":"2683e0cc-adab-4086-abb2-11b2cc65fe39"},"outputs":[{"name":"stdout","output_type":"stream","text":["Data successfully appended to my_file.txt\n"]}],"source":["10. # How can you append data to an existing file in python?\n","\n","\n","\n","# Open the file named 'my_file.txt' in append mode ('a')\n","with open('my_file.txt', 'a') as file:\n","    # Append a new line to the file\n","    file.write(\"\\nThis line is appended to the file.\")\n","\n","print(\"Data successfully appended to my_file.txt\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34,"status":"ok","timestamp":1757604471354,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"wJng2H3iY9VG","outputId":"c634d983-3681-409c-809c-c0d157369f79"},"outputs":[{"name":"stdout","output_type":"stream","text":["Error: The key 'grape' does not exist in the dictionary.\n"]}],"source":["11. # Write a Python program that uses a try-except block to handle an error when attempting to access a\n","#dictionary key that doesn't exist?\n","\n","\n","# Create a sample dictionary\n","my_dict = {\"apple\": 1, \"banana\": 2, \"cherry\": 3}\n","\n","try:\n","    # Attempt to access a key that does not exist\n","    value = my_dict[\"grape\"]\n","    print(f\"The value is: {value}\")\n","except KeyError:\n","    # Handle the KeyError\n","    print(\"Error: The key 'grape' does not exist in the dictionary.\")\n","except Exception as e:\n","    # Handle any other unexpected errors\n","    print(f\"An unexpected error occurred: {e}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fJs202_aZBHj"},"outputs":[],"source":["12. # Write a program that demonstrates using multiple except blocks to handle different types of exceptions?"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3900,"status":"ok","timestamp":1757604504487,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"WTIBP7l-ZBw2","outputId":"a2677aa8-8e78-4828-b470-8df7d486f5c3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Enter a number: 67\n","Result: 0.14925373134328357\n"]}],"source":["try:\n","    # Code that might raise different exceptions\n","    user_input = input(\"Enter a number: \")\n","    num = int(user_input)  # Potential ValueError\n","    result = 10 / num      # Potential ZeroDivisionError\n","    print(f\"Result: {result}\")\n","except ValueError:\n","    print(\"Error: Invalid input. Please enter a valid integer.\")\n","except ZeroDivisionError:\n","    print(\"Error: Cannot divide by zero.\")\n","except Exception as e:\n","    print(f\"An unexpected error occurred: {e}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iNzjyRCkZIyL"},"outputs":[],"source":["13. #  How would you check if a file exists before attempting to read it in Python?"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1757604528120,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"cZGYbfujZJkg","outputId":"a03371f3-2632-465e-dfa3-6b2286bb72e2"},"outputs":[{"name":"stdout","output_type":"stream","text":["File content:\n","Hello, this is a test string written to the file.\n","This line is appended to the file.\n"]}],"source":["import os\n","\n","file_path = 'my_file.txt'\n","\n","if os.path.exists(file_path):\n","    try:\n","        with open(file_path, 'r') as file:\n","            content = file.read()\n","            print(\"File content:\")\n","            print(content)\n","    except Exception as e:\n","        print(f\"An error occurred while reading the file: {e}\")\n","else:\n","    print(f\"Error: The file '{file_path}' does not exist.\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbYdN3n6ZOkM"},"outputs":[],"source":["14. # Write a program that uses the logging module to log both informational and error messages?"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1757604554066,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"zWzKOAXkZPYQ","outputId":"68d7b31c-9d8c-4944-a1b1-b3c8bb2bb46a"},"outputs":[{"name":"stderr","output_type":"stream","text":["ERROR:root:This is an error message.\n","WARNING:root:This is a warning message.\n"]}],"source":["import logging\n","\n","# Configure logging to output to the console\n","logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n","\n","# Log an informational message\n","logging.info(\"This is an informational message.\")\n","\n","# Log an error message\n","logging.error(\"This is an error message.\")\n","\n","# You can also log messages at other levels\n","logging.warning(\"This is a warning message.\")\n","logging.debug(\"This is a debug message (won't show with level=INFO).\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fIoSuLlxZSxD"},"outputs":[],"source":["15. # Write a Python program that prints the content of a file and handles the case when the file is empty?"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1757604576490,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"oQrSn1cDZXA8","outputId":"aca4df00-f3ca-4894-8d28-87131be54049"},"outputs":[{"name":"stdout","output_type":"stream","text":["Content of 'my_file.txt':\n","Hello, this is a test string written to the file.\n","This line is appended to the file.\n"]}],"source":["try:\n","    # Specify the file name\n","    file_name = 'my_file.txt' # You can change this to test with an empty file\n","\n","    # Open the file in read mode ('r')\n","    with open(file_name, 'r') as file:\n","        # Read the entire content of the file\n","        content = file.read()\n","\n","        # Check if the content is empty\n","        if not content:\n","            print(f\"The file '{file_name}' is empty.\")\n","        else:\n","            print(f\"Content of '{file_name}':\")\n","            print(content)\n","\n","except FileNotFoundError:\n","    print(f\"Error: The file '{file_name}' was not found.\")\n","except Exception as e:\n","    print(f\"An error occurred: {e}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uPsfuoWwZZ7j"},"outputs":[],"source":["16. # Demonstrate how to use memory profiling to check the memory usage of a small program?\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11121,"status":"ok","timestamp":1757604672652,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"kkQv4OJBZaq6","outputId":"095bc22f-e44e-4429-aa1d-4cb8cf5349b3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting memory_profiler\n","  Downloading memory_profiler-0.61.0-py3-none-any.whl.metadata (20 kB)\n","Requirement already satisfied: psutil in /usr/local/lib/python3.12/dist-packages (from memory_profiler) (5.9.5)\n","Downloading memory_profiler-0.61.0-py3-none-any.whl (31 kB)\n","Installing collected packages: memory_profiler\n","Successfully installed memory_profiler-0.61.0\n","ERROR: Could not find file /tmp/ipython-input-3069580340.py\n","List created.\n"]}],"source":["!pip install memory_profiler\n","\n","%load_ext memory_profiler\n","\n","from memory_profiler import profile\n","\n","@profile\n","def create_list():\n","    my_list = []\n","    for i in range(1000000):\n","        my_list.append(i)\n","    return my_list\n","\n","if __name__ == '__main__':\n","    my_large_list = create_list()\n","    print(\"List created.\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"738aWT3RZyf8"},"outputs":[],"source":["17. # Write a Python program to create and write a list of numbers to a file, one number per line?"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1757604755059,"user":{"displayName":"Shield","userId":"08588981710446958810"},"user_tz":-330},"id":"GPUXiS-2ZzPA","outputId":"3f9ab07a-9774-42c3-d79a-f410b05f6d34"},"outputs":[{"name":"stdout","output_type":"stream","text":["List of numbers successfully written to 'numbers_list.txt'\n"]}],"source":["numbers = [10, 20, 30, 40, 50, ]\n","\n","# Specify the file name\n","file_name = 'numbers_list.txt'\n","\n","try:\n","    # Open the file in write mode ('w')\n","    with open(file_name, 'w') as file:\n","        # Iterate through the list and write each number on a new line\n","        for number in numbers:\n","            file.write(str(number) + '\\n') # Convert number to string and add newline\n","\n","    print(f\"List of numbers successfully written to '{file_name}'\")\n","\n","except IOError:\n","    print(f\"Error: Could not write to the file '{file_name}'.\")\n","except Exception as e:\n","    print(f\"An unexpected error occurred: {e}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hKxyfdgdaVZO"},"outputs":[],"source":[" # 18 How would you implement a basic logging setup that logs to a file with rotation after 1MB?"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FWZnNIv5acEj","executionInfo":{"status":"ok","timestamp":1757605145021,"user_tz":-330,"elapsed":8488,"user":{"displayName":"Shield","userId":"08588981710446958810"}},"outputId":"dc39910f-b7c0-46e4-ebc1-ac94d4cca40e"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:my_logger:Log message number 0\n","INFO:my_logger:Log message number 1\n","INFO:my_logger:Log message number 2\n","INFO:my_logger:Log message number 3\n","INFO:my_logger:Log message number 4\n","INFO:my_logger:Log message number 5\n","INFO:my_logger:Log message number 6\n","INFO:my_logger:Log message number 7\n","INFO:my_logger:Log message number 8\n","INFO:my_logger:Log message number 9\n","INFO:my_logger:Log message number 10\n","INFO:my_logger:Log message number 11\n","INFO:my_logger:Log message number 12\n","INFO:my_logger:Log message number 13\n","INFO:my_logger:Log message number 14\n","INFO:my_logger:Log message number 15\n","INFO:my_logger:Log message number 16\n","INFO:my_logger:Log message number 17\n","INFO:my_logger:Log message number 18\n","INFO:my_logger:Log message number 19\n","INFO:my_logger:Log message number 20\n","INFO:my_logger:Log message number 21\n","INFO:my_logger:Log message number 22\n","INFO:my_logger:Log message number 23\n","INFO:my_logger:Log message number 24\n","INFO:my_logger:Log message number 25\n","INFO:my_logger:Log message number 26\n","INFO:my_logger:Log message number 27\n","INFO:my_logger:Log message number 28\n","INFO:my_logger:Log message number 29\n","INFO:my_logger:Log message number 30\n","INFO:my_logger:Log message number 31\n","INFO:my_logger:Log message number 32\n","INFO:my_logger:Log message number 33\n","INFO:my_logger:Log message number 34\n","INFO:my_logger:Log message number 35\n","INFO:my_logger:Log message number 36\n","INFO:my_logger:Log message number 37\n","INFO:my_logger:Log message number 38\n","INFO:my_logger:Log message number 39\n","INFO:my_logger:Log message number 40\n","INFO:my_logger:Log message number 41\n","INFO:my_logger:Log message number 42\n","INFO:my_logger:Log message number 43\n","INFO:my_logger:Log message number 44\n","INFO:my_logger:Log message number 45\n","INFO:my_logger:Log message number 46\n","INFO:my_logger:Log message number 47\n","INFO:my_logger:Log message number 48\n","INFO:my_logger:Log message number 49\n","INFO:my_logger:Log message number 50\n","INFO:my_logger:Log message number 51\n","INFO:my_logger:Log message number 52\n","INFO:my_logger:Log message number 53\n","INFO:my_logger:Log message number 54\n","INFO:my_logger:Log message number 55\n","INFO:my_logger:Log message number 56\n","INFO:my_logger:Log message number 57\n","INFO:my_logger:Log message number 58\n","INFO:my_logger:Log message number 59\n","INFO:my_logger:Log message number 60\n","INFO:my_logger:Log message number 61\n","INFO:my_logger:Log message number 62\n","INFO:my_logger:Log message number 63\n","INFO:my_logger:Log message number 64\n","INFO:my_logger:Log message number 65\n","INFO:my_logger:Log message number 66\n","INFO:my_logger:Log message number 67\n","INFO:my_logger:Log message number 68\n","INFO:my_logger:Log message number 69\n","INFO:my_logger:Log message number 70\n","INFO:my_logger:Log message number 71\n","INFO:my_logger:Log message number 72\n","INFO:my_logger:Log message number 73\n","INFO:my_logger:Log message number 74\n","INFO:my_logger:Log message number 75\n","INFO:my_logger:Log message number 76\n","INFO:my_logger:Log message number 77\n","INFO:my_logger:Log message number 78\n","INFO:my_logger:Log message number 79\n","INFO:my_logger:Log message number 80\n","INFO:my_logger:Log message number 81\n","INFO:my_logger:Log message number 82\n","INFO:my_logger:Log message number 83\n","INFO:my_logger:Log message number 84\n","INFO:my_logger:Log message number 85\n","INFO:my_logger:Log message number 86\n","INFO:my_logger:Log message number 87\n","INFO:my_logger:Log message number 88\n","INFO:my_logger:Log message number 89\n","INFO:my_logger:Log message number 90\n","INFO:my_logger:Log message number 91\n","INFO:my_logger:Log message number 92\n","INFO:my_logger:Log message number 93\n","INFO:my_logger:Log message number 94\n","INFO:my_logger:Log message number 95\n","INFO:my_logger:Log message number 96\n","INFO:my_logger:Log message number 97\n","INFO:my_logger:Log message number 98\n","INFO:my_logger:Log message number 99\n","INFO:my_logger:Log message number 100\n","INFO:my_logger:Log message number 101\n","INFO:my_logger:Log message number 102\n","INFO:my_logger:Log message number 103\n","INFO:my_logger:Log message number 104\n","INFO:my_logger:Log message number 105\n","INFO:my_logger:Log message number 106\n","INFO:my_logger:Log message number 107\n","INFO:my_logger:Log message number 108\n","INFO:my_logger:Log message number 109\n","INFO:my_logger:Log message number 110\n","INFO:my_logger:Log message number 111\n","INFO:my_logger:Log message number 112\n","INFO:my_logger:Log message number 113\n","INFO:my_logger:Log message number 114\n","INFO:my_logger:Log message number 115\n","INFO:my_logger:Log message number 116\n","INFO:my_logger:Log message number 117\n","INFO:my_logger:Log message number 118\n","INFO:my_logger:Log message number 119\n","INFO:my_logger:Log message number 120\n","INFO:my_logger:Log message number 121\n","INFO:my_logger:Log message number 122\n","INFO:my_logger:Log message number 123\n","INFO:my_logger:Log message number 124\n","INFO:my_logger:Log message number 125\n","INFO:my_logger:Log message number 126\n","INFO:my_logger:Log message number 127\n","INFO:my_logger:Log message number 128\n","INFO:my_logger:Log message number 129\n","INFO:my_logger:Log message number 130\n","INFO:my_logger:Log message number 131\n","INFO:my_logger:Log message number 132\n","INFO:my_logger:Log message number 133\n","INFO:my_logger:Log message number 134\n","INFO:my_logger:Log message number 135\n","INFO:my_logger:Log message number 136\n","INFO:my_logger:Log message number 137\n","INFO:my_logger:Log message number 138\n","INFO:my_logger:Log message number 139\n","INFO:my_logger:Log message number 140\n","INFO:my_logger:Log message number 141\n","INFO:my_logger:Log message number 142\n","INFO:my_logger:Log message number 143\n","INFO:my_logger:Log message number 144\n","INFO:my_logger:Log message number 145\n","INFO:my_logger:Log message number 146\n","INFO:my_logger:Log message number 147\n","INFO:my_logger:Log message number 148\n","INFO:my_logger:Log message number 149\n","INFO:my_logger:Log message number 150\n","INFO:my_logger:Log message number 151\n","INFO:my_logger:Log message number 152\n","INFO:my_logger:Log message number 153\n","INFO:my_logger:Log message number 154\n","INFO:my_logger:Log message number 155\n","INFO:my_logger:Log message number 156\n","INFO:my_logger:Log message number 157\n","INFO:my_logger:Log message number 158\n","INFO:my_logger:Log message number 159\n","INFO:my_logger:Log message number 160\n","INFO:my_logger:Log message number 161\n","INFO:my_logger:Log message number 162\n","INFO:my_logger:Log message number 163\n","INFO:my_logger:Log message number 164\n","INFO:my_logger:Log message number 165\n","INFO:my_logger:Log message number 166\n","INFO:my_logger:Log message number 167\n","INFO:my_logger:Log message number 168\n","INFO:my_logger:Log message number 169\n","INFO:my_logger:Log message number 170\n","INFO:my_logger:Log message number 171\n","INFO:my_logger:Log message number 172\n","INFO:my_logger:Log message number 173\n","INFO:my_logger:Log message number 174\n","INFO:my_logger:Log message number 175\n","INFO:my_logger:Log message number 176\n","INFO:my_logger:Log message number 177\n","INFO:my_logger:Log message number 178\n","INFO:my_logger:Log message number 179\n","INFO:my_logger:Log message number 180\n","INFO:my_logger:Log message number 181\n","INFO:my_logger:Log message number 182\n","INFO:my_logger:Log message number 183\n","INFO:my_logger:Log message number 184\n","INFO:my_logger:Log message number 185\n","INFO:my_logger:Log message number 186\n","INFO:my_logger:Log message number 187\n","INFO:my_logger:Log message number 188\n","INFO:my_logger:Log message number 189\n","INFO:my_logger:Log message number 190\n","INFO:my_logger:Log message number 191\n","INFO:my_logger:Log message number 192\n","INFO:my_logger:Log message number 193\n","INFO:my_logger:Log message number 194\n","INFO:my_logger:Log message number 195\n","INFO:my_logger:Log message number 196\n","INFO:my_logger:Log message number 197\n","INFO:my_logger:Log message number 198\n","INFO:my_logger:Log message number 199\n","INFO:my_logger:Log message number 200\n","INFO:my_logger:Log message number 201\n","INFO:my_logger:Log message number 202\n","INFO:my_logger:Log message number 203\n","INFO:my_logger:Log message number 204\n","INFO:my_logger:Log message number 205\n","INFO:my_logger:Log message number 206\n","INFO:my_logger:Log message number 207\n","INFO:my_logger:Log message number 208\n","INFO:my_logger:Log message number 209\n","INFO:my_logger:Log message number 210\n","INFO:my_logger:Log message number 211\n","INFO:my_logger:Log message number 212\n","INFO:my_logger:Log message number 213\n","INFO:my_logger:Log message number 214\n","INFO:my_logger:Log message number 215\n","INFO:my_logger:Log message number 216\n","INFO:my_logger:Log message number 217\n","INFO:my_logger:Log message number 218\n","INFO:my_logger:Log message number 219\n","INFO:my_logger:Log message number 220\n","INFO:my_logger:Log message number 221\n","INFO:my_logger:Log message number 222\n","INFO:my_logger:Log message number 223\n","INFO:my_logger:Log message number 224\n","INFO:my_logger:Log message number 225\n","INFO:my_logger:Log message number 226\n","INFO:my_logger:Log message number 227\n","INFO:my_logger:Log message number 228\n","INFO:my_logger:Log message number 229\n","INFO:my_logger:Log message number 230\n","INFO:my_logger:Log message number 231\n","INFO:my_logger:Log message number 232\n","INFO:my_logger:Log message number 233\n","INFO:my_logger:Log message number 234\n","INFO:my_logger:Log message number 235\n","INFO:my_logger:Log message number 236\n","INFO:my_logger:Log message number 237\n","INFO:my_logger:Log message number 238\n","INFO:my_logger:Log message number 239\n","INFO:my_logger:Log message number 240\n","INFO:my_logger:Log message number 241\n","INFO:my_logger:Log message number 242\n","INFO:my_logger:Log message number 243\n","INFO:my_logger:Log message number 244\n","INFO:my_logger:Log message number 245\n","INFO:my_logger:Log message number 246\n","INFO:my_logger:Log message number 247\n","INFO:my_logger:Log message number 248\n","INFO:my_logger:Log message number 249\n","INFO:my_logger:Log message number 250\n","INFO:my_logger:Log message number 251\n","INFO:my_logger:Log message number 252\n","INFO:my_logger:Log message number 253\n","INFO:my_logger:Log message number 254\n","INFO:my_logger:Log message number 255\n","INFO:my_logger:Log message number 256\n","INFO:my_logger:Log message number 257\n","INFO:my_logger:Log message number 258\n","INFO:my_logger:Log message number 259\n","INFO:my_logger:Log message number 260\n","INFO:my_logger:Log message number 261\n","INFO:my_logger:Log message number 262\n","INFO:my_logger:Log message number 263\n","INFO:my_logger:Log message number 264\n","INFO:my_logger:Log message number 265\n","INFO:my_logger:Log message number 266\n","INFO:my_logger:Log message number 267\n","INFO:my_logger:Log message number 268\n","INFO:my_logger:Log message number 269\n","INFO:my_logger:Log message number 270\n","INFO:my_logger:Log message number 271\n","INFO:my_logger:Log message number 272\n","INFO:my_logger:Log message number 273\n","INFO:my_logger:Log message number 274\n","INFO:my_logger:Log message number 275\n","INFO:my_logger:Log message number 276\n","INFO:my_logger:Log message number 277\n","INFO:my_logger:Log message number 278\n","INFO:my_logger:Log message number 279\n","INFO:my_logger:Log message number 280\n","INFO:my_logger:Log message number 281\n","INFO:my_logger:Log message number 282\n","INFO:my_logger:Log message number 283\n","INFO:my_logger:Log message number 284\n","INFO:my_logger:Log message number 285\n","INFO:my_logger:Log message number 286\n","INFO:my_logger:Log message number 287\n","INFO:my_logger:Log message number 288\n","INFO:my_logger:Log message number 289\n","INFO:my_logger:Log message number 290\n","INFO:my_logger:Log message number 291\n","INFO:my_logger:Log message number 292\n","INFO:my_logger:Log message number 293\n","INFO:my_logger:Log message number 294\n","INFO:my_logger:Log message number 295\n","INFO:my_logger:Log message number 296\n","INFO:my_logger:Log message number 297\n","INFO:my_logger:Log message number 298\n","INFO:my_logger:Log message number 299\n","INFO:my_logger:Log message number 300\n","INFO:my_logger:Log message number 301\n","INFO:my_logger:Log message number 302\n","INFO:my_logger:Log message number 303\n","INFO:my_logger:Log message number 304\n","INFO:my_logger:Log message number 305\n","INFO:my_logger:Log message number 306\n","INFO:my_logger:Log message number 307\n","INFO:my_logger:Log message number 308\n","INFO:my_logger:Log message number 309\n","INFO:my_logger:Log message number 310\n","INFO:my_logger:Log message number 311\n","INFO:my_logger:Log message number 312\n","INFO:my_logger:Log message number 313\n","INFO:my_logger:Log message number 314\n","INFO:my_logger:Log message number 315\n","INFO:my_logger:Log message number 316\n","INFO:my_logger:Log message number 317\n","INFO:my_logger:Log message number 318\n","INFO:my_logger:Log message number 319\n","INFO:my_logger:Log message number 320\n","INFO:my_logger:Log message number 321\n","INFO:my_logger:Log message number 322\n","INFO:my_logger:Log message number 323\n","INFO:my_logger:Log message number 324\n","INFO:my_logger:Log message number 325\n","INFO:my_logger:Log message number 326\n","INFO:my_logger:Log message number 327\n","INFO:my_logger:Log message number 328\n","INFO:my_logger:Log message number 329\n","INFO:my_logger:Log message number 330\n","INFO:my_logger:Log message number 331\n","INFO:my_logger:Log message number 332\n","INFO:my_logger:Log message number 333\n","INFO:my_logger:Log message number 334\n","INFO:my_logger:Log message number 335\n","INFO:my_logger:Log message number 336\n","INFO:my_logger:Log message number 337\n","INFO:my_logger:Log message number 338\n","INFO:my_logger:Log message number 339\n","INFO:my_logger:Log message number 340\n","INFO:my_logger:Log message number 341\n","INFO:my_logger:Log message number 342\n","INFO:my_logger:Log message number 343\n","INFO:my_logger:Log message number 344\n","INFO:my_logger:Log message number 345\n","INFO:my_logger:Log message number 346\n","INFO:my_logger:Log message number 347\n","INFO:my_logger:Log message number 348\n","INFO:my_logger:Log message number 349\n","INFO:my_logger:Log message number 350\n","INFO:my_logger:Log message number 351\n","INFO:my_logger:Log message number 352\n","INFO:my_logger:Log message number 353\n","INFO:my_logger:Log message number 354\n","INFO:my_logger:Log message number 355\n","INFO:my_logger:Log message number 356\n","INFO:my_logger:Log message number 357\n","INFO:my_logger:Log message number 358\n","INFO:my_logger:Log message number 359\n","INFO:my_logger:Log message number 360\n","INFO:my_logger:Log message number 361\n","INFO:my_logger:Log message number 362\n","INFO:my_logger:Log message number 363\n","INFO:my_logger:Log message number 364\n","INFO:my_logger:Log message number 365\n","INFO:my_logger:Log message number 366\n","INFO:my_logger:Log message number 367\n","INFO:my_logger:Log message number 368\n","INFO:my_logger:Log message number 369\n","INFO:my_logger:Log message number 370\n","INFO:my_logger:Log message number 371\n","INFO:my_logger:Log message number 372\n","INFO:my_logger:Log message number 373\n","INFO:my_logger:Log message number 374\n","INFO:my_logger:Log message number 375\n","INFO:my_logger:Log message number 376\n","INFO:my_logger:Log message number 377\n","INFO:my_logger:Log message number 378\n","INFO:my_logger:Log message number 379\n","INFO:my_logger:Log message number 380\n","INFO:my_logger:Log message number 381\n","INFO:my_logger:Log message number 382\n","INFO:my_logger:Log message number 383\n","INFO:my_logger:Log message number 384\n","INFO:my_logger:Log message number 385\n","INFO:my_logger:Log message number 386\n","INFO:my_logger:Log message number 387\n","INFO:my_logger:Log message number 388\n","INFO:my_logger:Log message number 389\n","INFO:my_logger:Log message number 390\n","INFO:my_logger:Log message number 391\n","INFO:my_logger:Log message number 392\n","INFO:my_logger:Log message number 393\n","INFO:my_logger:Log message number 394\n","INFO:my_logger:Log message number 395\n","INFO:my_logger:Log message number 396\n","INFO:my_logger:Log message number 397\n","INFO:my_logger:Log message number 398\n","INFO:my_logger:Log message number 399\n","INFO:my_logger:Log message number 400\n","INFO:my_logger:Log message number 401\n","INFO:my_logger:Log message number 402\n","INFO:my_logger:Log message number 403\n","INFO:my_logger:Log message number 404\n","INFO:my_logger:Log message number 405\n","INFO:my_logger:Log message number 406\n","INFO:my_logger:Log message number 407\n","INFO:my_logger:Log message number 408\n","INFO:my_logger:Log message number 409\n","INFO:my_logger:Log message number 410\n","INFO:my_logger:Log message number 411\n","INFO:my_logger:Log message number 412\n","INFO:my_logger:Log message number 413\n","INFO:my_logger:Log message number 414\n","INFO:my_logger:Log message number 415\n","INFO:my_logger:Log message number 416\n","INFO:my_logger:Log message number 417\n","INFO:my_logger:Log message number 418\n","INFO:my_logger:Log message number 419\n","INFO:my_logger:Log message number 420\n","INFO:my_logger:Log message number 421\n","INFO:my_logger:Log message number 422\n","INFO:my_logger:Log message number 423\n","INFO:my_logger:Log message number 424\n","INFO:my_logger:Log message number 425\n","INFO:my_logger:Log message number 426\n","INFO:my_logger:Log message number 427\n","INFO:my_logger:Log message number 428\n","INFO:my_logger:Log message number 429\n","INFO:my_logger:Log message number 430\n","INFO:my_logger:Log message number 431\n","INFO:my_logger:Log message number 432\n","INFO:my_logger:Log message number 433\n","INFO:my_logger:Log message number 434\n","INFO:my_logger:Log message number 435\n","INFO:my_logger:Log message number 436\n","INFO:my_logger:Log message number 437\n","INFO:my_logger:Log message number 438\n","INFO:my_logger:Log message number 439\n","INFO:my_logger:Log message number 440\n","INFO:my_logger:Log message number 441\n","INFO:my_logger:Log message number 442\n","INFO:my_logger:Log message number 443\n","INFO:my_logger:Log message number 444\n","INFO:my_logger:Log message number 445\n","INFO:my_logger:Log message number 446\n","INFO:my_logger:Log message number 447\n","INFO:my_logger:Log message number 448\n","INFO:my_logger:Log message number 449\n","INFO:my_logger:Log message number 450\n","INFO:my_logger:Log message number 451\n","INFO:my_logger:Log message number 452\n","INFO:my_logger:Log message number 453\n","INFO:my_logger:Log message number 454\n","INFO:my_logger:Log message number 455\n","INFO:my_logger:Log message number 456\n","INFO:my_logger:Log message number 457\n","INFO:my_logger:Log message number 458\n","INFO:my_logger:Log message number 459\n","INFO:my_logger:Log message number 460\n","INFO:my_logger:Log message number 461\n","INFO:my_logger:Log message number 462\n","INFO:my_logger:Log message number 463\n","INFO:my_logger:Log message number 464\n","INFO:my_logger:Log message number 465\n","INFO:my_logger:Log message number 466\n","INFO:my_logger:Log message number 467\n","INFO:my_logger:Log message number 468\n","INFO:my_logger:Log message number 469\n","INFO:my_logger:Log message number 470\n","INFO:my_logger:Log message number 471\n","INFO:my_logger:Log message number 472\n","INFO:my_logger:Log message number 473\n","INFO:my_logger:Log message number 474\n","INFO:my_logger:Log message number 475\n","INFO:my_logger:Log message number 476\n","INFO:my_logger:Log message number 477\n","INFO:my_logger:Log message number 478\n","INFO:my_logger:Log message number 479\n","INFO:my_logger:Log message number 480\n","INFO:my_logger:Log message number 481\n","INFO:my_logger:Log message number 482\n","INFO:my_logger:Log message number 483\n","INFO:my_logger:Log message number 484\n","INFO:my_logger:Log message number 485\n","INFO:my_logger:Log message number 486\n","INFO:my_logger:Log message number 487\n","INFO:my_logger:Log message number 488\n","INFO:my_logger:Log message number 489\n","INFO:my_logger:Log message number 490\n","INFO:my_logger:Log message number 491\n","INFO:my_logger:Log message number 492\n","INFO:my_logger:Log message number 493\n","INFO:my_logger:Log message number 494\n","INFO:my_logger:Log message number 495\n","INFO:my_logger:Log message number 496\n","INFO:my_logger:Log message number 497\n","INFO:my_logger:Log message number 498\n","INFO:my_logger:Log message number 499\n","INFO:my_logger:Log message number 500\n","INFO:my_logger:Log message number 501\n","INFO:my_logger:Log message number 502\n","INFO:my_logger:Log message number 503\n","INFO:my_logger:Log message number 504\n","INFO:my_logger:Log message number 505\n","INFO:my_logger:Log message number 506\n","INFO:my_logger:Log message number 507\n","INFO:my_logger:Log message number 508\n","INFO:my_logger:Log message number 509\n","INFO:my_logger:Log message number 510\n","INFO:my_logger:Log message number 511\n","INFO:my_logger:Log message number 512\n","INFO:my_logger:Log message number 513\n","INFO:my_logger:Log message number 514\n","INFO:my_logger:Log message number 515\n","INFO:my_logger:Log message number 516\n","INFO:my_logger:Log message number 517\n","INFO:my_logger:Log message number 518\n","INFO:my_logger:Log message number 519\n","INFO:my_logger:Log message number 520\n","INFO:my_logger:Log message number 521\n","INFO:my_logger:Log message number 522\n","INFO:my_logger:Log message number 523\n","INFO:my_logger:Log message number 524\n","INFO:my_logger:Log message number 525\n","INFO:my_logger:Log message number 526\n","INFO:my_logger:Log message number 527\n","INFO:my_logger:Log message number 528\n","INFO:my_logger:Log message number 529\n","INFO:my_logger:Log message number 530\n","INFO:my_logger:Log message number 531\n","INFO:my_logger:Log message number 532\n","INFO:my_logger:Log message number 533\n","INFO:my_logger:Log message number 534\n","INFO:my_logger:Log message number 535\n","INFO:my_logger:Log message number 536\n","INFO:my_logger:Log message number 537\n","INFO:my_logger:Log message number 538\n","INFO:my_logger:Log message number 539\n","INFO:my_logger:Log message number 540\n","INFO:my_logger:Log message number 541\n","INFO:my_logger:Log message number 542\n","INFO:my_logger:Log message number 543\n","INFO:my_logger:Log message number 544\n","INFO:my_logger:Log message number 545\n","INFO:my_logger:Log message number 546\n","INFO:my_logger:Log message number 547\n","INFO:my_logger:Log message number 548\n","INFO:my_logger:Log message number 549\n","INFO:my_logger:Log message number 550\n","INFO:my_logger:Log message number 551\n","INFO:my_logger:Log message number 552\n","INFO:my_logger:Log message number 553\n","INFO:my_logger:Log message number 554\n","INFO:my_logger:Log message number 555\n","INFO:my_logger:Log message number 556\n","INFO:my_logger:Log message number 557\n","INFO:my_logger:Log message number 558\n","INFO:my_logger:Log message number 559\n","INFO:my_logger:Log message number 560\n","INFO:my_logger:Log message number 561\n","INFO:my_logger:Log message number 562\n","INFO:my_logger:Log message number 563\n","INFO:my_logger:Log message number 564\n","INFO:my_logger:Log message number 565\n","INFO:my_logger:Log message number 566\n","INFO:my_logger:Log message number 567\n","INFO:my_logger:Log message number 568\n","INFO:my_logger:Log message number 569\n","INFO:my_logger:Log message number 570\n","INFO:my_logger:Log message number 571\n","INFO:my_logger:Log message number 572\n","INFO:my_logger:Log message number 573\n","INFO:my_logger:Log message number 574\n","INFO:my_logger:Log message number 575\n","INFO:my_logger:Log message number 576\n","INFO:my_logger:Log message number 577\n","INFO:my_logger:Log message number 578\n","INFO:my_logger:Log message number 579\n","INFO:my_logger:Log message number 580\n","INFO:my_logger:Log message number 581\n","INFO:my_logger:Log message number 582\n","INFO:my_logger:Log message number 583\n","INFO:my_logger:Log message number 584\n","INFO:my_logger:Log message number 585\n","INFO:my_logger:Log message number 586\n","INFO:my_logger:Log message number 587\n","INFO:my_logger:Log message number 588\n","INFO:my_logger:Log message number 589\n","INFO:my_logger:Log message number 590\n","INFO:my_logger:Log message number 591\n","INFO:my_logger:Log message number 592\n","INFO:my_logger:Log message number 593\n","INFO:my_logger:Log message number 594\n","INFO:my_logger:Log message number 595\n","INFO:my_logger:Log message number 596\n","INFO:my_logger:Log message number 597\n","INFO:my_logger:Log message number 598\n","INFO:my_logger:Log message number 599\n","INFO:my_logger:Log message number 600\n","INFO:my_logger:Log message number 601\n","INFO:my_logger:Log message number 602\n","INFO:my_logger:Log message number 603\n","INFO:my_logger:Log message number 604\n","INFO:my_logger:Log message number 605\n","INFO:my_logger:Log message number 606\n","INFO:my_logger:Log message number 607\n","INFO:my_logger:Log message number 608\n","INFO:my_logger:Log message number 609\n","INFO:my_logger:Log message number 610\n","INFO:my_logger:Log message number 611\n","INFO:my_logger:Log message number 612\n","INFO:my_logger:Log message number 613\n","INFO:my_logger:Log message number 614\n","INFO:my_logger:Log message number 615\n","INFO:my_logger:Log message number 616\n","INFO:my_logger:Log message number 617\n","INFO:my_logger:Log message number 618\n","INFO:my_logger:Log message number 619\n","INFO:my_logger:Log message number 620\n","INFO:my_logger:Log message number 621\n","INFO:my_logger:Log message number 622\n","INFO:my_logger:Log message number 623\n","INFO:my_logger:Log message number 624\n","INFO:my_logger:Log message number 625\n","INFO:my_logger:Log message number 626\n","INFO:my_logger:Log message number 627\n","INFO:my_logger:Log message number 628\n","INFO:my_logger:Log message number 629\n","INFO:my_logger:Log message number 630\n","INFO:my_logger:Log message number 631\n","INFO:my_logger:Log message number 632\n","INFO:my_logger:Log message number 633\n","INFO:my_logger:Log message number 634\n","INFO:my_logger:Log message number 635\n","INFO:my_logger:Log message number 636\n","INFO:my_logger:Log message number 637\n","INFO:my_logger:Log message number 638\n","INFO:my_logger:Log message number 639\n","INFO:my_logger:Log message number 640\n","INFO:my_logger:Log message number 641\n","INFO:my_logger:Log message number 642\n","INFO:my_logger:Log message number 643\n","INFO:my_logger:Log message number 644\n","INFO:my_logger:Log message number 645\n","INFO:my_logger:Log message number 646\n","INFO:my_logger:Log message number 647\n","INFO:my_logger:Log message number 648\n","INFO:my_logger:Log message number 649\n","INFO:my_logger:Log message number 650\n","INFO:my_logger:Log message number 651\n","INFO:my_logger:Log message number 652\n","INFO:my_logger:Log message number 653\n","INFO:my_logger:Log message number 654\n","INFO:my_logger:Log message number 655\n","INFO:my_logger:Log message number 656\n","INFO:my_logger:Log message number 657\n","INFO:my_logger:Log message number 658\n","INFO:my_logger:Log message number 659\n","INFO:my_logger:Log message number 660\n","INFO:my_logger:Log message number 661\n","INFO:my_logger:Log message number 662\n","INFO:my_logger:Log message number 663\n","INFO:my_logger:Log message number 664\n","INFO:my_logger:Log message number 665\n","INFO:my_logger:Log message number 666\n","INFO:my_logger:Log message number 667\n","INFO:my_logger:Log message number 668\n","INFO:my_logger:Log message number 669\n","INFO:my_logger:Log message number 670\n","INFO:my_logger:Log message number 671\n","INFO:my_logger:Log message number 672\n","INFO:my_logger:Log message number 673\n","INFO:my_logger:Log message number 674\n","INFO:my_logger:Log message number 675\n","INFO:my_logger:Log message number 676\n","INFO:my_logger:Log message number 677\n","INFO:my_logger:Log message number 678\n","INFO:my_logger:Log message number 679\n","INFO:my_logger:Log message number 680\n","INFO:my_logger:Log message number 681\n","INFO:my_logger:Log message number 682\n","INFO:my_logger:Log message number 683\n","INFO:my_logger:Log message number 684\n","INFO:my_logger:Log message number 685\n","INFO:my_logger:Log message number 686\n","INFO:my_logger:Log message number 687\n","INFO:my_logger:Log message number 688\n","INFO:my_logger:Log message number 689\n","INFO:my_logger:Log message number 690\n","INFO:my_logger:Log message number 691\n","INFO:my_logger:Log message number 692\n","INFO:my_logger:Log message number 693\n","INFO:my_logger:Log message number 694\n","INFO:my_logger:Log message number 695\n","INFO:my_logger:Log message number 696\n","INFO:my_logger:Log message number 697\n","INFO:my_logger:Log message number 698\n","INFO:my_logger:Log message number 699\n","INFO:my_logger:Log message number 700\n","INFO:my_logger:Log message number 701\n","INFO:my_logger:Log message number 702\n","INFO:my_logger:Log message number 703\n","INFO:my_logger:Log message number 704\n","INFO:my_logger:Log message number 705\n","INFO:my_logger:Log message number 706\n","INFO:my_logger:Log message number 707\n","INFO:my_logger:Log message number 708\n","INFO:my_logger:Log message number 709\n","INFO:my_logger:Log message number 710\n","INFO:my_logger:Log message number 711\n","INFO:my_logger:Log message number 712\n","INFO:my_logger:Log message number 713\n","INFO:my_logger:Log message number 714\n","INFO:my_logger:Log message number 715\n","INFO:my_logger:Log message number 716\n","INFO:my_logger:Log message number 717\n","INFO:my_logger:Log message number 718\n","INFO:my_logger:Log message number 719\n","INFO:my_logger:Log message number 720\n","INFO:my_logger:Log message number 721\n","INFO:my_logger:Log message number 722\n","INFO:my_logger:Log message number 723\n","INFO:my_logger:Log message number 724\n","INFO:my_logger:Log message number 725\n","INFO:my_logger:Log message number 726\n","INFO:my_logger:Log message number 727\n","INFO:my_logger:Log message number 728\n","INFO:my_logger:Log message number 729\n","INFO:my_logger:Log message number 730\n","INFO:my_logger:Log message number 731\n","INFO:my_logger:Log message number 732\n","INFO:my_logger:Log message number 733\n","INFO:my_logger:Log message number 734\n","INFO:my_logger:Log message number 735\n","INFO:my_logger:Log message number 736\n","INFO:my_logger:Log message number 737\n","INFO:my_logger:Log message number 738\n","INFO:my_logger:Log message number 739\n","INFO:my_logger:Log message number 740\n","INFO:my_logger:Log message number 741\n","INFO:my_logger:Log message number 742\n","INFO:my_logger:Log message number 743\n","INFO:my_logger:Log message number 744\n","INFO:my_logger:Log message number 745\n","INFO:my_logger:Log message number 746\n","INFO:my_logger:Log message number 747\n","INFO:my_logger:Log message number 748\n","INFO:my_logger:Log message number 749\n","INFO:my_logger:Log message number 750\n","INFO:my_logger:Log message number 751\n","INFO:my_logger:Log message number 752\n","INFO:my_logger:Log message number 753\n","INFO:my_logger:Log message number 754\n","INFO:my_logger:Log message number 755\n","INFO:my_logger:Log message number 756\n","INFO:my_logger:Log message number 757\n","INFO:my_logger:Log message number 758\n","INFO:my_logger:Log message number 759\n","INFO:my_logger:Log message number 760\n","INFO:my_logger:Log message number 761\n","INFO:my_logger:Log message number 762\n","INFO:my_logger:Log message number 763\n","INFO:my_logger:Log message number 764\n","INFO:my_logger:Log message number 765\n","INFO:my_logger:Log message number 766\n","INFO:my_logger:Log message number 767\n","INFO:my_logger:Log message number 768\n","INFO:my_logger:Log message number 769\n","INFO:my_logger:Log message number 770\n","INFO:my_logger:Log message number 771\n","INFO:my_logger:Log message number 772\n","INFO:my_logger:Log message number 773\n","INFO:my_logger:Log message number 774\n","INFO:my_logger:Log message number 775\n","INFO:my_logger:Log message number 776\n","INFO:my_logger:Log message number 777\n","INFO:my_logger:Log message number 778\n","INFO:my_logger:Log message number 779\n","INFO:my_logger:Log message number 780\n","INFO:my_logger:Log message number 781\n","INFO:my_logger:Log message number 782\n","INFO:my_logger:Log message number 783\n","INFO:my_logger:Log message number 784\n","INFO:my_logger:Log message number 785\n","INFO:my_logger:Log message number 786\n","INFO:my_logger:Log message number 787\n","INFO:my_logger:Log message number 788\n","INFO:my_logger:Log message number 789\n","INFO:my_logger:Log message number 790\n","INFO:my_logger:Log message number 791\n","INFO:my_logger:Log message number 792\n","INFO:my_logger:Log message number 793\n","INFO:my_logger:Log message number 794\n","INFO:my_logger:Log message number 795\n","INFO:my_logger:Log message number 796\n","INFO:my_logger:Log message number 797\n","INFO:my_logger:Log message number 798\n","INFO:my_logger:Log message number 799\n","INFO:my_logger:Log message number 800\n","INFO:my_logger:Log message number 801\n","INFO:my_logger:Log message number 802\n","INFO:my_logger:Log message number 803\n","INFO:my_logger:Log message number 804\n","INFO:my_logger:Log message number 805\n","INFO:my_logger:Log message number 806\n","INFO:my_logger:Log message number 807\n","INFO:my_logger:Log message number 808\n","INFO:my_logger:Log message number 809\n","INFO:my_logger:Log message number 810\n","INFO:my_logger:Log message number 811\n","INFO:my_logger:Log message number 812\n","INFO:my_logger:Log message number 813\n","INFO:my_logger:Log message number 814\n","INFO:my_logger:Log message number 815\n","INFO:my_logger:Log message number 816\n","INFO:my_logger:Log message number 817\n","INFO:my_logger:Log message number 818\n","INFO:my_logger:Log message number 819\n","INFO:my_logger:Log message number 820\n","INFO:my_logger:Log message number 821\n","INFO:my_logger:Log message number 822\n","INFO:my_logger:Log message number 823\n","INFO:my_logger:Log message number 824\n","INFO:my_logger:Log message number 825\n","INFO:my_logger:Log message number 826\n","INFO:my_logger:Log message number 827\n","INFO:my_logger:Log message number 828\n","INFO:my_logger:Log message number 829\n","INFO:my_logger:Log message number 830\n","INFO:my_logger:Log message number 831\n","INFO:my_logger:Log message number 832\n","INFO:my_logger:Log message number 833\n","INFO:my_logger:Log message number 834\n","INFO:my_logger:Log message number 835\n","INFO:my_logger:Log message number 836\n","INFO:my_logger:Log message number 837\n","INFO:my_logger:Log message number 838\n","INFO:my_logger:Log message number 839\n","INFO:my_logger:Log message number 840\n","INFO:my_logger:Log message number 841\n","INFO:my_logger:Log message number 842\n","INFO:my_logger:Log message number 843\n","INFO:my_logger:Log message number 844\n","INFO:my_logger:Log message number 845\n","INFO:my_logger:Log message number 846\n","INFO:my_logger:Log message number 847\n","INFO:my_logger:Log message number 848\n","INFO:my_logger:Log message number 849\n","INFO:my_logger:Log message number 850\n","INFO:my_logger:Log message number 851\n","INFO:my_logger:Log message number 852\n","INFO:my_logger:Log message number 853\n","INFO:my_logger:Log message number 854\n","INFO:my_logger:Log message number 855\n","INFO:my_logger:Log message number 856\n","INFO:my_logger:Log message number 857\n","INFO:my_logger:Log message number 858\n","INFO:my_logger:Log message number 859\n","INFO:my_logger:Log message number 860\n","INFO:my_logger:Log message number 861\n","INFO:my_logger:Log message number 862\n","INFO:my_logger:Log message number 863\n","INFO:my_logger:Log message number 864\n","INFO:my_logger:Log message number 865\n","INFO:my_logger:Log message number 866\n","INFO:my_logger:Log message number 867\n","INFO:my_logger:Log message number 868\n","INFO:my_logger:Log message number 869\n","INFO:my_logger:Log message number 870\n","INFO:my_logger:Log message number 871\n","INFO:my_logger:Log message number 872\n","INFO:my_logger:Log message number 873\n","INFO:my_logger:Log message number 874\n","INFO:my_logger:Log message number 875\n","INFO:my_logger:Log message number 876\n","INFO:my_logger:Log message number 877\n","INFO:my_logger:Log message number 878\n","INFO:my_logger:Log message number 879\n","INFO:my_logger:Log message number 880\n","INFO:my_logger:Log message number 881\n","INFO:my_logger:Log message number 882\n","INFO:my_logger:Log message number 883\n","INFO:my_logger:Log message number 884\n","INFO:my_logger:Log message number 885\n","INFO:my_logger:Log message number 886\n","INFO:my_logger:Log message number 887\n","INFO:my_logger:Log message number 888\n","INFO:my_logger:Log message number 889\n","INFO:my_logger:Log message number 890\n","INFO:my_logger:Log message number 891\n","INFO:my_logger:Log message number 892\n","INFO:my_logger:Log message number 893\n","INFO:my_logger:Log message number 894\n","INFO:my_logger:Log message number 895\n","INFO:my_logger:Log message number 896\n","INFO:my_logger:Log message number 897\n","INFO:my_logger:Log message number 898\n","INFO:my_logger:Log message number 899\n","INFO:my_logger:Log message number 900\n","INFO:my_logger:Log message number 901\n","INFO:my_logger:Log message number 902\n","INFO:my_logger:Log message number 903\n","INFO:my_logger:Log message number 904\n","INFO:my_logger:Log message number 905\n","INFO:my_logger:Log message number 906\n","INFO:my_logger:Log message number 907\n","INFO:my_logger:Log message number 908\n","INFO:my_logger:Log message number 909\n","INFO:my_logger:Log message number 910\n","INFO:my_logger:Log message number 911\n","INFO:my_logger:Log message number 912\n","INFO:my_logger:Log message number 913\n","INFO:my_logger:Log message number 914\n","INFO:my_logger:Log message number 915\n","INFO:my_logger:Log message number 916\n","INFO:my_logger:Log message number 917\n","INFO:my_logger:Log message number 918\n","INFO:my_logger:Log message number 919\n","INFO:my_logger:Log message number 920\n","INFO:my_logger:Log message number 921\n","INFO:my_logger:Log message number 922\n","INFO:my_logger:Log message number 923\n","INFO:my_logger:Log message number 924\n","INFO:my_logger:Log message number 925\n","INFO:my_logger:Log message number 926\n","INFO:my_logger:Log message number 927\n","INFO:my_logger:Log message number 928\n","INFO:my_logger:Log message number 929\n","INFO:my_logger:Log message number 930\n","INFO:my_logger:Log message number 931\n","INFO:my_logger:Log message number 932\n","INFO:my_logger:Log message number 933\n","INFO:my_logger:Log message number 934\n","INFO:my_logger:Log message number 935\n","INFO:my_logger:Log message number 936\n","INFO:my_logger:Log message number 937\n","INFO:my_logger:Log message number 938\n","INFO:my_logger:Log message number 939\n","INFO:my_logger:Log message number 940\n","INFO:my_logger:Log message number 941\n","INFO:my_logger:Log message number 942\n","INFO:my_logger:Log message number 943\n","INFO:my_logger:Log message number 944\n","INFO:my_logger:Log message number 945\n","INFO:my_logger:Log message number 946\n","INFO:my_logger:Log message number 947\n","INFO:my_logger:Log message number 948\n","INFO:my_logger:Log message number 949\n","INFO:my_logger:Log message number 950\n","INFO:my_logger:Log message number 951\n","INFO:my_logger:Log message number 952\n","INFO:my_logger:Log message number 953\n","INFO:my_logger:Log message number 954\n","INFO:my_logger:Log message number 955\n","INFO:my_logger:Log message number 956\n","INFO:my_logger:Log message number 957\n","INFO:my_logger:Log message number 958\n","INFO:my_logger:Log message number 959\n","INFO:my_logger:Log message number 960\n","INFO:my_logger:Log message number 961\n","INFO:my_logger:Log message number 962\n","INFO:my_logger:Log message number 963\n","INFO:my_logger:Log message number 964\n","INFO:my_logger:Log message number 965\n","INFO:my_logger:Log message number 966\n","INFO:my_logger:Log message number 967\n","INFO:my_logger:Log message number 968\n","INFO:my_logger:Log message number 969\n","INFO:my_logger:Log message number 970\n","INFO:my_logger:Log message number 971\n","INFO:my_logger:Log message number 972\n","INFO:my_logger:Log message number 973\n","INFO:my_logger:Log message number 974\n","INFO:my_logger:Log message number 975\n","INFO:my_logger:Log message number 976\n","INFO:my_logger:Log message number 977\n","INFO:my_logger:Log message number 978\n","INFO:my_logger:Log message number 979\n","INFO:my_logger:Log message number 980\n","INFO:my_logger:Log message number 981\n","INFO:my_logger:Log message number 982\n","INFO:my_logger:Log message number 983\n","INFO:my_logger:Log message number 984\n","INFO:my_logger:Log message number 985\n","INFO:my_logger:Log message number 986\n","INFO:my_logger:Log message number 987\n","INFO:my_logger:Log message number 988\n","INFO:my_logger:Log message number 989\n","INFO:my_logger:Log message number 990\n","INFO:my_logger:Log message number 991\n","INFO:my_logger:Log message number 992\n","INFO:my_logger:Log message number 993\n","INFO:my_logger:Log message number 994\n","INFO:my_logger:Log message number 995\n","INFO:my_logger:Log message number 996\n","INFO:my_logger:Log message number 997\n","INFO:my_logger:Log message number 998\n","INFO:my_logger:Log message number 999\n"]}],"source":["import logging\n","from logging.handlers import RotatingFileHandler\n","\n","# Create a logger\n","logger = logging.getLogger(\"my_logger\")\n","logger.setLevel(logging.DEBUG)  # capture all logs (DEBUG and above)\n","\n","# Create a rotating file handler\n","handler = RotatingFileHandler(\n","    \"app.log\",       # log file name\n","    maxBytes=1_000_000,  # rotate after 1 MB\n","    backupCount=3        # keep last 3 log files as backup\n",")\n","\n","# Create a formatter and attach it\n","formatter = logging.Formatter(\"%(asctime)s - %(levelname)s - %(message)s\")\n","handler.setFormatter(formatter)\n","\n","# Add handler to the logger\n","logger.addHandler(handler)\n","\n","# Example logs\n","for i in range(1000):\n","    logger.info(f\"Log message number {i}\")\n"]},{"cell_type":"code","source":["19. # Write a program that handles both IndexError and KeyError using a try-except block?"],"metadata":{"id":"1TZIx_22bn73"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def access_element(data, index=None, key=None):\n","    try:\n","        if index is not None:\n","            # Attempt to access an element by index (potential IndexError)\n","            value = data[index]\n","            print(f\"Value at index {index}: {value}\")\n","        elif key is not None:\n","            # Attempt to access an element by key (potential KeyError)\n","            value = data[key]\n","            print(f\"Value for key '{key}': {value}\")\n","        else:\n","            print(\"No index or key provided.\")\n","\n","    except IndexError:\n","        print(f\"Error: Invalid index '{index}'. Index out of range.\")\n","    except KeyError:\n","        print(f\"Error: Key '{key}' not found in the dictionary.\")\n","    except Exception as e:\n","        print(f\"An unexpected error occurred: {e}\")\n","        # Example usage:\n","\n","# List example (IndexError)\n","my_list = [10, 20, 30]\n","access_element(my_list, index=5) # This will cause an IndexError\n","\n","# Dictionary example (KeyError)\n","my_dict = {\"a\": 1, \"b\": 2}\n","access_element(my_dict, key=\"c\") # This will cause a KeyError\n","\n","# Valid access examples\n","access_element(my_list, index=1)\n","access_element(my_dict, key=\"a\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q24y4uA3bog7","executionInfo":{"status":"ok","timestamp":1757605200709,"user_tz":-330,"elapsed":11,"user":{"displayName":"Shield","userId":"08588981710446958810"}},"outputId":"e1267a7b-f34f-43aa-9cb9-4b09d769267a"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Error: Invalid index '5'. Index out of range.\n","Error: Key 'c' not found in the dictionary.\n","Value at index 1: 20\n","Value for key 'a': 1\n"]}]},{"cell_type":"code","source":["20. # How would you open a file and read its contents using a context manager in Python?"],"metadata":{"id":"_CrkdrS0byju"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["try:\n","    # Specify the file name\n","    file_name = 'my_file.txt'\n","\n","    # Open the file using a context manager ('with' statement)\n","    with open(file_name, 'r') as file:\n","        # Read the entire content of the file\n","        content = file.read()\n","\n","        # Print the content\n","        print(f\"Content of '{file_name}':\")\n","        print(content)\n","\n","except FileNotFoundError:\n","    print(f\"Error: The file '{file_name}' was not found.\")\n","except Exception as e:\n","    print(f\"An error occurred: {e}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pITZyIZpbzL-","executionInfo":{"status":"ok","timestamp":1757605228711,"user_tz":-330,"elapsed":12,"user":{"displayName":"Shield","userId":"08588981710446958810"}},"outputId":"24992a0c-2aad-4dbb-9a7b-9365a13ad217"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Content of 'my_file.txt':\n","Hello, this is a test string written to the file.\n","This line is appended to the file.\n"]}]},{"cell_type":"code","source":["21. # Write a Python program that reads a file and prints the number of occurrences of a specific word?"],"metadata":{"id":"LDOCHukzb8En"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import re\n","\n","def count_word_occurrences(file_path, word):\n","    \"\"\"\n","    Reads a file and counts the occurrences of a specific word (case-insensitive).\n","\n","    Args:\n","        file_path (str): The path to the file.\n","        word (str): The word to count.\n","\n","    Returns:\n","        int: The number of occurrences of the word in the file.\n","    \"\"\"\n","    count = 0\n","    try:\n","        with open(file_path, 'r', encoding='utf-8') as file:\n","            # Read the entire content of the file\n","            content = file.read()\n","\n","            # Use regular expression to find the word, ignoring case\n","            # \\b ensures that we match whole words only\n","            word_pattern = r'\\b' + re.escape(word) + r'\\b'\n","            matches = re.findall(word_pattern, content, re.IGNORECASE)\n","\n","            count = len(matches)\n","\n","    except FileNotFoundError:\n","        print(f\"Error: The file '{file_path}' was not found.\")\n","        return -1 # Indicate an error\n","    except Exception as e:\n","        print(f\"An error occurred: {e}\")\n","        return -1 # Indicate an error\n","\n","    return count\n","\n","# Example usage:\n","file_name = 'my_file.txt'  # Replace with your file name\n","word_to_find = 'file'      # Replace with the word you want to count\n","\n","occurrence_count = count_word_occurrences(file_name, word_to_find)\n","\n","if occurrence_count != -1:\n","    print(f\"The word '{word_to_find}' appears {occurrence_count} times in '{file_name}'.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5VgBFIeWb85O","executionInfo":{"status":"ok","timestamp":1757605267030,"user_tz":-330,"elapsed":53,"user":{"displayName":"Shield","userId":"08588981710446958810"}},"outputId":"6e6848a7-dfe8-4bd7-af0e-223485cfce92"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["The word 'file' appears 2 times in 'my_file.txt'.\n"]}]},{"cell_type":"code","source":["22. # How can you check if a file is empty before attempting to read its contents?"],"metadata":{"id":"SFO49_hacCCB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","\n","def is_file_empty(file_path):\n","    \"\"\"\n","    Checks if a file exists and is empty.\n","\n","    Args:\n","        file_path (str): The path to the file.\n","\n","    Returns:\n","        bool: True if the file exists and is empty, False otherwise.\n","    \"\"\"\n","    if not os.path.exists(file_path):\n","        print(f\"Error: The file '{file_path}' does not exist.\")\n","        return False # File doesn't exist, so not empty\n","\n","    if os.path.getsize(file_path) == 0:\n","        print(f\"The file '{file_path}' is empty.\")\n","        return True\n","    else:\n","        print(f\"The file '{file_path}' is not empty.\")\n","        return False\n","\n","# Example usage:\n","file_name_existing = 'my_file.txt'  # Assuming this file exists and has content\n","file_name_empty = 'empty_file.txt' # Let's create an empty file for testing\n","\n","# Create an empty file for demonstration\n","with open(file_name_empty, 'w') as f:\n","    pass # This creates an empty file\n","\n","is_file_empty(file_name_existing)\n","is_file_empty(file_name_empty)\n","is_file_empty('non_existent_file.txt') # Test with a non-existent file\n","\n","# Clean up the empty file\n","os.remove(file_name_empty)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M_LlTIemcJGj","executionInfo":{"status":"ok","timestamp":1757605317966,"user_tz":-330,"elapsed":58,"user":{"displayName":"Shield","userId":"08588981710446958810"}},"outputId":"bb624ac8-74c0-48ec-b3be-5e082b3f1bf3"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["The file 'my_file.txt' is not empty.\n","The file 'empty_file.txt' is empty.\n","Error: The file 'non_existent_file.txt' does not exist.\n"]}]},{"cell_type":"code","source":["23. # Write a Python program that writes to a log file when an error occurs during file handling?"],"metadata":{"id":"oMCZHgmacN86"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import logging\n","import os\n","\n","# Configure logging to write to a file\n","logging.basicConfig(filename='file_handling_errors.log', level=logging.ERROR,\n","                    format='%(asctime)s - %(levelname)s - %(message)s')\n","\n","def read_file_with_error_logging(file_path):\n","    \"\"\"\n","    Attempts to read a file and logs an error if file handling fails.\n","\n","    Args:\n","        file_path (str): The path to the file to read.\n","    \"\"\"\n","    try:\n","        with open(file_path, 'r') as file:\n","            content = file.read()\n","            print(f\"Successfully read content from '{file_path}':\")\n","            print(content)\n","    except FileNotFoundError:\n","        error_message = f\"Error: File not found at '{file_path}'.\"\n","        logging.error(error_message)\n","        print(error_message + \" This error has been logged.\")\n","    except IOError as e:\n","        error_message = f\"Error: An I/O error occurred while reading '{file_path}': {e}\"\n","        logging.error(error_message)\n","        print(error_message + \" This error has been logged.\")\n","    except Exception as e:\n","        error_message = f\"Error: An unexpected error occurred while handling '{file_path}': {e}\"\n","        logging.error(error_message)\n","        print(error_message + \" This error has been logged.\")\n","\n","# Example usage:\n","# Attempt to read a file that exists\n","read_file_with_error_logging('my_file.txt')\n","\n","# Attempt to read a file that does NOT exist\n","read_file_with_error_logging('non_existent_file_for_logging.txt')\n","\n","print(\"\\nCheck 'file_handling_errors.log' for logged errors.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x_o9bOX0cQrz","executionInfo":{"status":"ok","timestamp":1757605347828,"user_tz":-330,"elapsed":32,"user":{"displayName":"Shield","userId":"08588981710446958810"}},"outputId":"049862bc-a2d8-413e-fbde-685e206bedec"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stderr","text":["ERROR:root:Error: File not found at 'non_existent_file_for_logging.txt'.\n"]},{"output_type":"stream","name":"stdout","text":["Successfully read content from 'my_file.txt':\n","Hello, this is a test string written to the file.\n","This line is appended to the file.\n","Error: File not found at 'non_existent_file_for_logging.txt'. This error has been logged.\n","\n","Check 'file_handling_errors.log' for logged errors.\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMOCJgAfPGAEH67tL6a+7Qp"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}